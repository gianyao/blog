[{"title":"Hello World","url":"/2022/04/03/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"幽默工具箱","url":"/2022/04/01/humorous/","content":"1、答非所问答非所问，就是我们常说的打岔。在综艺节目里，常常可以看到艺人用这个技巧。提问的人得到的是一个与答案无关的回答，因此产生一种嘀笑皆非的感觉。\n\n台湾综艺节目《我猜我猜我猜猜猜》中，主持人阿雅问吴宗宪：“你跟康康哪个比较搞笑？”吴宗宪回答说：“他比较可笑。”\n\n当然在电视节目中的普通人也会有这样的时刻。\n\n记者：“大爷，大娘给您做了一桌子菜，您感动吗？” \n大爷：“我不敢动啊，每次都是她先动我才敢动。”\n\n在生活中，很多老年人听力不太好，跟他们说话时常会出现答非所问的情况。\n通过以上两个典型的答非所问场景，不难看出，打岔可以营造出一种简单但荒诞有趣的对话环境。提问一方不断被打岔后的无奈、妥协与最后不得不放弃，都是笑点所在。\n2、避重就轻避重就轻，就是不顺着对方的话讲，故意曲解前一句话中的重点词语，把重点放到与人们日常理解不一样的词语上，怎么歪怎么来，让人们听到后产生意外感，从而具有幽默的效果。比如：\n\n冬天大雁为什么要飞到南方过冬？因为走过去太远了。\n\n在这句话的前半句中，从正常的角度考虑，问题的重点应该是为什么到南方过冬，关键词是“南方”，但在后半句的回答中，却避开了这个关键词，把答案放到了“飞”这个字上。这就是避重就轻。再举两个例子体会一下：\n\n你：房子又漏雨了！\n房东：就你交的这点房租，难道还想漏香槟吗？\n\n\n你：你的房子这么差，还要求押一付三？\n房东：因为押一付五不合法。\n\n从这几个例子可以看出，避重就轻这个技巧的关键，是把前一个句子中人们习惯了的关键词，换成另一个不常用的关键词，避开原来的重点，针对另一个不重点的关键词来说出后面的答案。日常训练的时候，只要记住不按常理回答就可以了。\n3、重新定义就是把人们习惯中已经约定俗成的固定定义，用另外一套逻辑重新解释出来。被重新定义最多的就是成语和俗语。这些成语和俗语，通过另一个逻辑解释出来的时候，一下子冲破了人们对这个词语原有的固定认知，产生出很强的意外感，幽默由此产生。来看个例子：\n\n有一年我们商学院有同学毕业，我们做了个吐槽大会。对其中一位同学的吐槽是：“这是位德艺双馨的艺术家，他得意扬扬的样子就好像是刚刚发了双薪。”\n因为这位同学做设计工作，的确自带傲慢气质，所以，这种调侃一说出来，所有人都笑了。\n\n在这里，“德艺双馨”被重新定义为“得意双薪”，打破了这个词在人们心中的固有形象，以意料之外的解读引发了大家的笑声。\n\n我参加过一个学习，第一名的同学最后会获得学院的一个奖励，就是明星老师的VIP(贵宾)私房课。主持人开玩笑说：“什么是私房课呢？就是到私人的房子里去上课。”\n\n这个例子使用的也是重新定义的技巧。确保重新定义的意思和原来的表达意味处于不同的方向，否则重新定义就失去了意义。\n4、先躺枪再甩锅躺枪就是前面你可以正经地批评一件事，义正词严。然后在结尾的地方一拐弯，把锅甩给一个毫无防备的人。举个例子：\n\n何洁曾经放狠话，说她要是瘦不下来就退出娱乐圈，我说你不要这样，你在娱乐圈进进出出不太好，这个娱乐圈的通道就这么窄，就因为你，苏醒现在都没进去。\n\n再举个例子：\n\n创始人一出事就会导致公司市值掉几百亿，这提醒我们企业做大做强之后，企业家本身的自我约束力也得提升，否则很容易对企业造成巨大的损失。你说是吧，孙总？\n\n记住这个躺枪的经典句型——“你说是吧？”。\n5、声东击西声东击西，就是前面说一件事，后面说另一件事。也就是在说的过程中，打断已有的强逻辑关联，冒出一个弱逻辑关联。比如，在饭店就餐时，有人这样点菜：\n\n这个葱爆羊肉看起来真好吃，这个红烧鱼也不错，这个小鸡炖蘑菇挺诱人，我们点一个水晶肘子吧。\n\n声东击西的两件事之间，是有一定联系的。在这儿例子中，虽然没点葱爆羊肉、红烧鱼、小鸡炖蘑菇，但是水晶肘子还是属于菜品的。如果在同样的情景下，点菜的人说：“这个葱爆羊肉看起来真不错，卫生间在哪？”就会因为上下过于不衔接而给人莫名其妙的感觉。\n6、谐音梗谐音梗属于入门级别的技巧，简单易懂。\n谐音梗用于故意制造误会，继而产生出幽默的效果。误会是喜剧中一个很常用的套路，无论是在相声中，还是网上的段子中，如果是误会套路的，很多都是用谐音梗创作出来而。举个例子：\n\n一天店里新来了个女服务员，店领导一到店里就说：“人呢？茶！”服务员赶紧数：“1、2、3、4、5、6、7，报告领导，7个人。”领导怒了，说：“茶！！”服务员再数：“7、6、5、5、4、3、2、1，还是7个，领导。”领导很无奈地说：“你数啥！”服务员回答：“我属狗”。\n\n再比如：\n\nA：王菲是不是暗恋哪吒呀？\nB：为什么这么说？\nA：因为常听她唱：想你时你在闹海…\n\n还有，前面“答非所问”中提到的“感动”和“敢不敢动”中的“敢动”也是一个谐音梗。\n7、用暗示留白笑点这个东西，从来都不是单方面的，当一句幽默的话从你嘴里说出来，要等听众经过大脑反应之后，才会表现出好笑或者不好笑的状态。正因为如此，有些笑点不需要直接表述出来，可以利用暗示，给观众留下想象的余地。这种留白打造的含蓄笑点，总是能够令人会心一笑。\n\n几个朋友聚会，聊到关于自己最讨厌的人或事，其中一个朋友开玩笑说：“我最讨厌比我还帅的人。”另一位补刀问他：“那我们这群人不都是你讨厌的对象？”\n\n这句话没有直接表达“我们都比你帅”这个意思，但通过信息的留白，大家都能很迅速地明白这句话的真实意思。\n我给大家一个联系，可以采用说A说C不说B的方式进行训练。A是前提，C是结果，B是中间过程，省略中间环节，直接从前提跳到结果。也就是说，将中间内容留给听众去自我分析，让大家自己找到笑点。\n8、三段式三段式是我个人最喜欢的一个技巧\n所谓三段式，就是在你的段子中有一组东西，我们暂且称它们为A、B、C，其中A和B属于同一类，这样可以让观众形成一个预期，然后你给一个不同类的C，观众就会因为意外而发笑。\n国外有一个经典的三段式笑话：\n\n空姐在头等舱分发饮料。她问一个很有魅力的男乘客：“您是要咖啡、茶、还是我？”\n\n我们平时经常说有的人说话一套一套的，其实很多就是三段式的变形。比如，小米科技集团联合创始人刘德是个挺幽默的人，在谈到小米生态链的时候，他曾经说过这样一段话：\n\n我们很尊重创业者，尽量满足他们的需求。他们说要400万，我们就给400万，他们说要800万，我们就给800万，他们说要2000万，我们就说：“哥们儿，我们算了下，你需要800万。”\n\n三段式的特点在于，经过一层一层的铺垫，可以激发听众的好奇心，让他们对最终的结果产生期待。同时，也可以通过前面两段的叙述，让听众对故事的结果形成一定的预期，然后我们再用第三段打破预期。\n如果没有前面两段的铺垫，你只讲“创业者要2000万，但我们认为他只需要800万”，并不能达到引人发笑的目的。在很多喜剧作品中，也非常强调包袱的铺平垫稳，前面铺垫得越扎实，最后的包袱越响。\n在学习使用逻辑性三段式叙述方法的时候，我们可以通过时间拆分的方式进行训练，将事件的经过分成A、B、C三个阶段。先用A、B形成预期，然后用C来打破预期。在进行A、B阶段的叙述时，要注意描述的吸引力，如果在铺垫阶段没有抓住听者的注意力，那么段子的效果肯定会大打折扣。\n三段式可以跟其他技巧叠加使用，比如下面这个“三段式+谐音梗”的例子：\n\n这玩意儿别头上就是头花，别领子上就是领花别腰上就是腰花。\n\n9、头韵和尾韵头韵和尾韵是押韵的一种，指的是在铺垫中找一个词，在包袱中使用与这个词当中的一个字相同的一个词。\n最常见的是压尾韵，比如：\n\n人生没有如果，只要后果和结果。\n\n铺垫中是“如果”，包袱中用了“后果”和“结果”的尾韵。\n头韵就是铺垫中的连接词和包袱中的笑点词首字相同。\n\n那个让你心动的人，结婚后可能会让你心梗。\n\n\n我们是处对象，又不是处钱。\n\n使用头韵和尾韵，因为前后的押韵和对比，平添了语言的不少趣味性，显得短小俏皮，是非常实用的一个幽默技巧。\n10、词语叠用中国汉字的魅力在于，同样的字在不同的情景下，代表的意思也不尽相同。尤其在一句话里，高密度重复使用同一个词，总是会让人听得晕头转向，进而被这种絮絮叨叨的描述和自己产生的困扰逗笑。\n\n亲密关系有四种：你懂他他也懂你，你懂他他不懂你，你不懂他他懂你，你不懂他他也不懂你。\n\n在这句话中，“你”“懂”“他”这三个关键词在不断地重复和叠用，在不仔细深究的情况下，很难一下子明白其中的含义。这种词语叠用的描述方式，如果以书面化的形式展示，不足以表现它的笑点；相反，若搭配语速较快的口语表达，则能展示它的幽默效果。类似的还有：\n\n外国学生做汉语考试试题。题面是：小王想给自己媳妇调动工作，于是拿出红包塞给领导，说：“这是我的一点意思”。领导说：“你这是什么意思？”小王说：“我就想意思意思。”领导说：“你这样做就没意思了。”题目问：这里的意思都是什么意思？\n\n看到这样的题目，我对外国朋友产生了深深的同情。\n词语叠用还可以有一种升级版，就是把关键词略微做一下变形，让人感觉更好笑。因为这种升级版更绕，更烧脑，需要听众更专注，所以如果最后听众能跟上节奏和思路，会更有成就感，更开心。\n\n今晚是神曲专场。神曲有三种，一种像《凤凰传奇》，你能听懂也会唱；一种像《新贵妃醉酒》，你能听懂不一定会唱；还有一种像《忐忑》，你听不懂也不会唱。\n\n在现实生活中我们常常使用词语叠用这个技巧，只不过之前并不知道这是个技巧。比如：\n\n我家的狗名叫溜溜，每次我下楼遛狗碰到邻居,他们都对我说:”老铁,溜溜溜啊!”\n\n相信现在你明白怎么做词语叠用了.如果你想更好地掌握这个技巧,我给你一个小练习叫”我知道”。两个人为一组，甲说“我知道”，乙说”我知道你知道”，然后甲再说“我知道你知道我知道”，以此类推，直到一人说不下去为止。说的时候要动脑，看自己的脑袋转得有没有嘴巴快。\n11、化用典故典故，包括诗词、歇后语、俗语、名言等，指的是人人皆知的名句。化用典故就是稍微改动一下典故，把一个常规的俗语变“歪”，让典故带上幽默色彩。比如：\n\n善有善报，恶有恶报，不是不报，是你这个发票有点问题。\n\n\n水能载舟，亦能煮粥。\n\n\n是金子总会发光，是镜子总会反光。\n\n这些段子一般采用典故的前半句形成常规的期待，然后改写后半段，以出其不意的“歪理”来破坏听众的预期走向，从而形成笑点。因为典故深入人心，稍微改动一点点就会变得出人意料，带来好笑的效果。化用的典故一般语言仍然工整对仗，笑点和铺垫押韵，朗朗上口。\n12、词语拆分有些词语固定搭配在一起的时候是一个意思，拆成单独的字又是另外一个意思。词语拆分的技巧，就是用词语首先形成一个有效的预期，然后把这个词语拆成一个个单独的字来进行细化描述，打破原有的预期，从而形成笑点。\n\n我们工作要100%投入，周一投入20%，周二投入20%，周三投入20%，周四投入20%，周五投入20%。\n\n这句话的原意是鼓励大家工作要投入全部的精力。但经过以时间为线索的词语拆分，每天的100%，就成了5天的每天20%，用这种完全曲解原有意思的方法引发人的笑点。\n\n有一次，美国舞蹈家邓肯和爱因斯坦碰面了。\n邓肯对爱因斯坦说：“如果我们结合会生一个最棒的孩子，我的身材，你的大脑。”\n爱因斯坦幽默地回答说：“未必吧，万一反过来怎么办？”\n\n从某种程度来说，这个段子也可以算作拆分的一种，把人类个体拆分成了身体和大脑，然后通过打乱组合，将原本最美好的组合变为最不合理的组合，从而产生矛盾，制造出笑点。\n词语拆分的技巧赋予了词语新的解释和含义，使人产生耳目一新的感觉。\n","categories":["幽默"],"tags":["幽默"]},{"title":"坚毅力表","url":"/2022/03/01/grit/","content":"测试坚毅指数\n\n\n\n\n一点儿都不像我\n不太像我\n有点儿像我\n很像我\n特别像我\n\n\n\n1. 新的想法和项目有时会将我从旧的想法和项目中抽离\n5\n4\n3\n2\n1\n\n\n2. 挫折不会让我气馁，我不会轻易放弃\n1\n2\n3\n4\n5\n\n\n3. 我经常设定一个目标，但后来又会选择另一个不同的目标\n5\n4\n3\n2\n1\n\n\n4. 我是一个努力工作的人\n1\n2\n3\n4\n5\n\n\n5. 需要花费几个月时间才能完成的项目会让我比较难以集中注意力\n5\n4\n3\n2\n1\n\n\n6. 无论我开始做什么，我都会把它做完\n1\n2\n3\n4\n5\n\n\n7. 我的兴趣每年都在变化\n5\n4\n3\n2\n1\n\n\n8. 我很勤奋，而且从不放弃\n1\n2\n3\n4\n5\n\n\n9. 我曾在短时间内迷上了一个想法或项目，但后来又失去了兴趣\n5\n4\n3\n2\n1\n\n\n10. 我曾经克服了种种挫折，征服了一个重要的挑战\n1\n2\n3\n4\n5\n\n\n将上面所有项目的得分加起来，除以10，计算出你的坚毅指数。\n这个测试的最高得分为5分(异常坚毅)，最低得分为1分(一点儿都不坚毅)。\n用下面的图表将自己的分数与美国成年人的大样本进行比较。\n\n\n\n百分位数\n坚毅指数\n\n\n\n10%\n2.5\n\n\n20%\n3.0\n\n\n30%\n3.3\n\n\n40%\n3.5\n\n\n50%\n3.8\n\n\n60%\n3.9\n\n\n70%\n4.1\n\n\n80%\n4.3\n\n\n90%\n4.5\n\n\n95%\n4.7\n\n\n99%\n4.9\n\n\n你的分数反映的是现在的你如何看待自己。你此时的坚毅指数可能与你年轻时的坚毅指数有所不同。如果你过一段时间再进行一次测试，那么就可能会得到一个不同的分数。有充分的理由相信，坚毅指数是可以改变的。\n坚毅有两个部分组成：激情和毅力。\n如果你想挖掘得更深入一点儿，不妨计算一下自己在每个部分的单项得分。你的激情得分是将你在奇数上的得分相加，再除以5。\n你的毅力得分是将你在偶数题上的得分相加，再除以5。\n如果你在激情上的得分较高，那么你在毅力方面可能也会获得高分，反之亦然。\n"},{"title":"查看数据库信息","url":"/2022/04/09/sqlserver/","content":"查看数据库信息1. 使用目录视图\n使用sys.database_files查看有关数据库文件的信息。\n使用sys.filegroups查看有关数据库组的信息。\n使用sys.master_files查看数据库文件的基本信息和状态信息。\n使用sys.databases数据库和文件目录视图查看有关数据库的基本信息。\n\n2. 使用函数如果要查看指定数据库中的指定选项信息时，可以使用DATABASEPROPERTYEX()函数，该函数每次只返回一个选项的信息。\nUSE test  GO  SELECT DATABASEPROPERTYEX(‘test’, ‘Status’)  AS ‘test数据库状态’\n\nDATABASEPROPERTYEX可用属性值\n\n\n属性\n说明\n\n\n\nCollation\n数据库的默认排序规则名称\n\n\nComparisonStyle\n排序规则的Windows比较样式\n\n\nIsAnsiNullDefault\n数据库遵循ISO规则，允许Null值\n\n\nIsAnsiNullsEnabled\n所有与Null的比较将取值为未知\n\n\nIsAnsiPaddingEnabled\n在比较或插入前，字符串将被填充到相同长度\n\n\nIsAnsiWarningsEnabled\n如果发生了标准错误条件，则将发出错误消息或警告消息\n\n\nIsArithmeticAbortEnabled\n如果执行查询时发生溢出或被零除错误，则将结束查询\n\n\nIsAutoClose\n数据库在最后一位用户退出后完全关闭并释放资源\n\n\nIsAutoCreatestatistics\n在查询优化期间自动生成优化查询所需的缺失统计信息\n\n\nIsAutoShrink\n数据库文件可以自动定期收缩\n\n\nIsAutoUpdatestatistics\n如果表中数据更改造成统计信息过期，则自动更新现有统计信息\n\n\nIsCloseCursorsOnCommitEnabled\n提交事务时打开的游标已关闭期，则自动更新现有统计信息\n\n\nIsInStandBy\n数据库以只读方式联机，并允许还原日志\n\n\nIsLocalCursorsDefault\n游标声明默认为 LOCAL\n\n\nIsMergePublished\n如果安装了复制，则可以发布数据库表供合并复制\n\n\n3. 使用系统存储过程除了上述的目录视图和函数外，\n\n还可以使用存储过程sp_spaceused显示数据库使用和保留的空间。\nsp_helpdb存储过程查看所有数据库的基本信息。\n\n作业：使用T-SQL语句创建名称为newDB的新数据库，数据库的参数如下。●  逻辑数据文件名：newDBdata。●  操作系统数据文件名：D:\\newDBdata.mdf。●  数据文件的初始大小：2MB。●  数据文件的最大大小：20MB。●  数据文件增长幅度：10%。●  日志逻辑文件名：newDBlog。●  操作系统日志文件名：D:\\newDBlog.ldf。●  日志文件初始大小：1MB。●  日志文件增长幅度：5%。\n","categories":["SQL"],"tags":["SQL"]},{"title":"Date类","url":"/2022/04/10/Date/","content":"1. 日期对象如何创建，如何获取时间毫秒值？\nDate date &#x3D; new Date();\nlong time &#x3D; date.getTime();\n\n2. 时间毫秒值怎么恢复成日期对象\nDate d &#x3D; new Date(time);\nd.setTime(time);\n\nSimpleDateFormat 类作用\n可以对Date对象或时间毫秒值格式化成我们喜欢的时间形式\n也可以把字符串的时间形式解析成日期对象。\n\n"},{"title":"day02 Java基础语法","url":"/2022/04/11/day02/","content":"0、类型转换问题类型转换（理解）在Java中，会存在不同类型的数据需要一起参与运算，所以这些数据类型之间是需要相互转换的，分为两种情况：自动类型转换和强制类型转换。\n自动类型转换*类型范围小的变量，可以直接赋值给类型范围大**的变量。\n\n把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如：\ndouble num = 10; // 将int类型的10直接赋值给double类型System.out.println(num); // 输出10.0byte a = 12 ;int b = a;System.out.println(b); // 12\n\n\n\n表达式的自动类型转换在表达式中，小范围类型的变量会自动转换成当前较大范围的类型再运算。\n\n注意事项：\n表达式的最终结果类型由表达式中的最高类型决定。\n在表达式中，byte、short、char 是直接转换成int类型参与运算的。 \n强制类型转换类型范围大的数据或者变量，不能直接赋值给类型范围小的变量，会报错，把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量必须进行强制类型转换。\n强制类型转换格式：目标数据类型 变量名 &#x3D; (目标数据类型)值或者变量;\n​    例如：\ndouble num1 = 5.5;int num2 = (int) num1; // 将double类型的num1强制转换为int类型System.out.println(num2); // 输出5（小数位直接舍弃）\n\n说明：\n\nchar类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，’a’对应97。\n\nint a = &#x27;a&#x27;;System.out.println(a); // 将输出97\n\n\n整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。\n\nbyte b1 = 10;byte b2 = 20;byte b3 = b1 + b2; // 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。// 修改为:int num = b1 + b2;// 或者：byte b3 = (byte) (b1 + b2);\n\n\nboolean类型不能与其他基本数据类型相互转换。\n\n1. 运算符1.1 算术运算符（理解）1.1.1 运算符和表达式运算符：对常量或者变量进行操作的符号\n表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。\n​                    不同运算符连接的表达式体现的是不同类型的表达式。\n举例说明：\nint a = 10;int b = 20;int c = a + b;\n\n  +：是运算符，并且是算术运算符。\n  a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。\n1.1.2 算术运算符\n\n\n符号\n作用\n说明\n\n\n\n+\n加\n参看小学一年级\n\n\n-\n减\n参看小学一年级\n\n\n*\n乘\n参看小学二年级，与“×”相同\n\n\n&#x2F;\n除\n参看小学二年级，与“÷”相同\n\n\n%\n取余\n获取的是两个数据做除法的余数\n\n\n注意：\n&#x2F;和%的区别：两个数据做除法，&#x2F;取结果的商，%取结果的余数。\n整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。\nint a = 10;int b = 3;System.out.println(a / b); // 输出结果3System.out.println(a % b); // 输出结果1\n\n1.1.3 字符的“+”操作char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：\n‘a’  –  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加\n‘A’  –  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加\n‘0’  –  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加\n// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少char ch1 = &#x27;a&#x27;;System.out.println(ch1 + 1); // 输出98，97 + 1 = 98char ch2 = &#x27;A&#x27;;System.out.println(ch2 + 1); // 输出66，65 + 1 = 66char ch3 = &#x27;0&#x27;;System.out.println(ch3 + 1); // 输出49，48 + 1 = 49\n\n算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。\n提升规则：\nbyte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。\n整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型\n​       等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double\n例如：\nbyte b1 = 10;byte b2 = 20;// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度int i3 = b1 + b2; // 应该使用int接收byte b3 = (byte) (b1 + b2); // 或者将结果强制转换为byte类型-------------------------------int num1 = 10;double num2 = 20.0;double num3 = num1 + num2; // 使用double接收，因为num1会自动提升为double类型\n\ntips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定义字符，而使用字符串类型，更不会使用char类型做算术运算。\n1.1.4 字符串的“+”操作当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。\nSystem.out.println(&quot;itheima&quot;+ 666); // 输出：itheima666\n\n在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。\nSystem.out.println(1 + 99 + &quot;年黑马&quot;); // 输出：199年黑马System.out.println(1 + 2 + &quot;itheima&quot; + 3 + 4); // 输出：3itheima34// 可以使用小括号改变运算的优先级 System.out.println(1 + 2 + &quot;itheima&quot; + (3 + 4)); // 输出：3itheima7\n\n1.2 赋值运算符（应用）赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。\n\n\n\n符号\n作用\n说明\n\n\n\n&#x3D;\n赋值\na&#x3D;10，将10赋值给变量a\n\n\n+&#x3D;\n加后赋值\na+&#x3D;b，将a+b的值给a\n\n\n-&#x3D;\n减后赋值\na-&#x3D;b，将a-b的值给a\n\n\n*&#x3D;\n乘后赋值\na*&#x3D;b，将a×b的值给a\n\n\n&#x2F;&#x3D;\n除后赋值\na&#x2F;&#x3D;b，将a÷b的商给a\n\n\n%&#x3D;\n取余后赋值\na%&#x3D;b，将a÷b的余数给a\n\n\n注意：\n扩展的赋值运算符隐含了强制类型转换。\nshort s = 10;s = s + 10; // 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度s += 10; // 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);\n\n1.3 自增自减运算符（理解）\n\n\n符号\n作用\n说明\n\n\n\n++\n自增\n变量的值加1\n\n\n–\n自减\n变量的值减1\n\n\n注意事项：\n​    ++和– 既可以放在变量的后边，也可以放在变量的前边。\n​    单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。\n​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。\n​    参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。\n​    最常见的用法：单独使用。\nint i = 10;i++; // 单独使用System.out.println(&quot;i:&quot; + i); // i:11int j = 10;++j; // 单独使用System.out.println(&quot;j:&quot; + j); // j:11int x = 10;int y = x++; // 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1System.out.println(&quot;x:&quot; + x + &quot;, y:&quot; + y); // x:11，y:10int m = 10;int n = ++m; // 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1System.out.println(&quot;m:&quot; + m + &quot;, m:&quot; + m); // m:11，m:11\n\n练习：\nint x = 10;int y = x++ + x++ + x++;System.out.println(y); // y的值是多少？/*解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。所以整个式子应该是：int y = 10 + 11 + 12;输出结果为33。*/注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！\n\n1.4 关系运算符（应用）关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。\n\n\n\n符号\n说明\n\n\n\n&#x3D;&#x3D;\na&#x3D;&#x3D;b，判断a和b的值是否相等，成立为true，不成立为false\n\n\n!&#x3D;\na!&#x3D;b，判断a和b的值是否不相等，成立为true，不成立为false\n\n\n&gt;\na&gt;b，判断a是否大于b，成立为true，不成立为false\n\n\n&gt;&#x3D;\na&gt;&#x3D;b，判断a是否大于等于b，成立为true，不成立为false\n\n\n&lt;\na&lt;b，判断a是否小于b，成立为true，不成立为false\n\n\n&lt;&#x3D;\na&lt;&#x3D;b，判断a是否小于等于b，成立为true，不成立为false\n\n\n注意事项：\n​    关系运算符的结果都是boolean类型，要么是true，要么是false。\n​    千万不要把“&#x3D;&#x3D;”误写成“&#x3D;”，”&#x3D;&#x3D;”是判断是否相等的关系，”&#x3D;”是赋值。\nint a = 10;int b = 20;System.out.println(a == b); // falseSystem.out.println(a != b); // trueSystem.out.println(a &gt; b); // falseSystem.out.println(a &gt;= b); // falseSystem.out.println(a &lt; b); // trueSystem.out.println(a &lt;= b); // true// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量boolean flag = a &gt; b;System.out.println(flag); // 输出false\n\n1.5 逻辑运算符（应用）逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。\n\n\n\n符号\n作用\n说明\n\n\n\n&amp;\n逻辑与\na&amp;b，a和b都是true，结果为true，否则为false\n\n\n|\n逻辑或\na|b，a和b都是false，结果为false，否则为true\n\n\n^\n逻辑异或\na^b，a和b结果不同为true，相同为false\n\n\n!\n逻辑非\n!a，结果和a的结果正好相反\n\n\n//定义变量int i = 10;int j = 20;int k = 30;//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为falseSystem.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出falseSystem.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出falseSystem.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出falseSystem.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出trueSystem.out.println(&quot;--------&quot;);//| “或”，或者的关系，只要表达式中有一个值为true，结果即为trueSystem.out.println((i &gt; j) | (i &gt; k)); //false | false,输出falseSystem.out.println((i &lt; j) | (i &gt; k)); //true | false,输出trueSystem.out.println((i &gt; j) | (i &lt; k)); //false | true,输出trueSystem.out.println((i &lt; j) | (i &lt; k)); //true | true,输出trueSystem.out.println(&quot;--------&quot;);//^ “异或”，相同为false，不同为trueSystem.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出falseSystem.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出trueSystem.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出trueSystem.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出falseSystem.out.println(&quot;--------&quot;);//! “非”，取反System.out.println((i &gt; j)); //falseSystem.out.println(!(i &gt; j)); //!false，,输出true\n\n短路逻辑运算符\n\n\n符号\n作用\n说明\n\n\n\n&amp;&amp;\n短路与\n作用和&amp;相同，但是有短路效果\n\n\n||\n短路或\n作用和|相同，但是有短路效果\n\n\n在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。\n\n逻辑与&amp;，无论左边真假，右边都要执行。\n\n短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。\n\n逻辑或|，无论左边真假，右边都要执行。\n\n短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。\n\n\nint x = 3;int y = 4;System.out.println((x++ &gt; 4) &amp; (y++ &gt; 5)); // 两个表达都会运算System.out.println(x); // 4System.out.println(y); // 5System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); // 左边已经可以确定结果为false，右边不参与运算System.out.println(x); // 4System.out.println(y); // 4\n\n1.6 三元运算符（理解）三元运算符语法格式：\n关系表达式 ? 表达式1 : 表达式2;\n\n解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。\n举例：\nint a = 10;int b = 20;int c = a &gt; b ? a : b; // 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值\n\n三元运算符案例：\n1、需求：动物园里有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断两只老虎的体重是否相同。\npublic class OperatorTest01 &#123;\tpublic static void main(String[] args) &#123;\t\t//1：定义两个变量用于保存老虎的体重，单位为kg，这里仅仅体现数值即可。\t\tint weight1 = 180;\t\tint weight2 = 200;\t\t\t//2：用三元运算符实现老虎体重的判断，体重相同，返回true，否则，返回false。\t\tboolean b = weight1 == weight2 ? true : false;\t\t\t//3：输出结果\t\tSystem.out.println(&quot;b:&quot; + b);\t&#125;&#125;\n\n2、需求：一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。\npublic class OperatorTest02 &#123;\tpublic static void main(String[] args) &#123;\t\t//1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。\t\tint height1 = 150;\t\tint height2 = 210;\t\tint height3 = 165;\t\t\t//2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。\t\tint tempHeight = height1 &gt; height2 ? height1 : height2;\t\t\t\t//3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。\t\tint maxHeight = tempHeight &gt; height3 ? tempHeight : height3;\t\t\t//4：输出结果\t\tSystem.out.println(&quot;maxHeight:&quot; + maxHeight);\t&#125;&#125;\n\n2. 数据输入（应用）我们可以通过 Scanner 类来获取用户的输入。使用步骤如下：\n1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。\nimport java.util.Scanner; \n\n2、创建Scanner对象。\nScanner sc = new Scanner(System.in);// 创建Scanner对象，sc表示变量名，其他均不可变\n\n3、接收数据\n int i = sc.nextInt(); // 表示将键盘录入的值作为int数返回。\n\n示例：\nimport java.util.Scanner;public class ScannerDemo &#123;\tpublic static void main(String[] args) &#123;\t\t//创建对象\t\tScanner sc = new Scanner(System.in);\t\t//接收数据\t\tint x = sc.nextInt();\t\t//输出数据\t\tSystem.out.println(&quot;x:&quot; + x);\t&#125;&#125;\n\n改写三个和尚案例，数据使用键盘录入。\nimport java.util.Scanner;public class ScannerTest &#123;\tpublic static void main(String[] args) &#123;\t\t//身高未知，采用键盘录入实现。首先导包，然后创建对象。\t\tScanner sc = new Scanner(System.in);\t\t//键盘录入三个身高分别赋值给三个变量。\t\tSystem.out.println(&quot;请输入第一个和尚的身高：&quot;);\t\tint height1 = sc.nextInt();\t\tSystem.out.println(&quot;请输入第二个和尚的身高：&quot;);\t\tint height2 = sc.nextInt();\t\tSystem.out.println(&quot;请输入第三个和尚的身高：&quot;);\t\tint height3 = sc.nextInt();\t\t//用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。\t\tint tempHeight = height1 &gt; height2 ? height1 : height2;\t\t//用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。\t\tint maxHeight = tempHeight &gt; height3 ? tempHeight : height3;\t\t//输出结果。\t\tSystem.out.println(&quot;这三个和尚中身高最高的是：&quot; + maxHeight +&quot;cm&quot;);\t&#125;&#125;\n\n\n\nimport java.util.Scanner;public class IfTest02 &#123;\tpublic static void main(String[] args) &#123;\t\t//小明的考试成绩未知，可以使用键盘录入的方式获取值\t\tScanner sc = new Scanner(System.in);\t\t\tSystem.out.println(&quot;请输入一个分数：&quot;);\t\tint score = sc.nextInt();\t\t//由于奖励种类较多，属于多种判断，采用if...else...if格式实现\t\t//为每种判断设置对应的条件\t\t//为每种判断设置对应的奖励\t\t\t//数据测试：正确数据，边界数据，错误数据\t\tif(score&gt;100 || score&lt;0) &#123;\t\t\tSystem.out.println(&quot;你输入的分数有误&quot;);\t\t&#125; else if(score&gt;=95 &amp;&amp; score&lt;=100) &#123;\t\t\tSystem.out.println(&quot;山地自行车一辆&quot;);\t\t&#125; else if(score&gt;=90 &amp;&amp; score&lt;=94) &#123;\t\t\tSystem.out.println(&quot;游乐场玩一次&quot;);\t\t&#125; else if(score&gt;=80 &amp;&amp; score&lt;=89) &#123;\t\t\tSystem.out.println(&quot;变形金刚玩具一个&quot;);\t\t&#125; else &#123;\t\t\tSystem.out.println(&quot;胖揍一顿&quot;);\t\t&#125;\t&#125;&#125;","categories":["Java"],"tags":["Java"]},{"title":"day01 java基础语法","url":"/2022/04/11/day01/","content":"day01 - java基础语法1. Java概述1.1 Java语言发展史（了解）语言：人与人交流沟通的表达方式\n计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言\nJava语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言\nJava之父：詹姆斯·高斯林（James Gosling）\n2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：https://www.oracle.com \n当前，我们课程使用的JDK版本：11.0\n1.2 Java语言跨平台原理（理解）Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。\n\n1.3 JRE和JDK（记忆）\nJVM（Java Virtual Machine），Java虚拟机\nJRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）\nJDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具\n总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。\n1.4 JDK的下载和安装（应用）1.4.1 下载通过官方网站获取JDK\nhttp://www.oracle.com\n注意：针对不同的操作系统，需要下载对应版本的JDK。\n具体下载步骤请参见《JDK下载及安装说明文档》\n1.4.2 安装傻瓜式安装，下一步即可。但默认的安装路径是在C:\\Program Files下，为方便统一管理建议修改安装路径，将与开发相关的软件都安装到一个目录下，例如：E:\\develop。\n注意：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。\n具体安装步骤请参见《JDK下载及安装说明文档》\n1.4.3 JDK的安装目录介绍\n\n\n目录名称\n说明\n\n\n\nbin\n该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。\n\n\nconf\n该路径下存放了JDK的相关配置文件。\n\n\ninclude\n该路径下存放了一些平台特定的头文件。\n\n\njmods\n该路径下存放了JDK的各种模块。\n\n\nlegal\n该路径下存放了JDK各模块的授权文档。\n\n\nlib\n该路径下存放了JDK工具的一些补充JAR包。\n\n\n2. 入门程序HelloWorld2.1 常用DOS命令（应用）在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。\n1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。\n2、常用命令及其作用\n\n\n\n操作\n说明\n\n\n\n盘符名称:\n盘符切换。E:回车，表示切换到E盘。\n\n\ndir\n查看当前路径下的内容。\n\n\ncd 目录\n进入单级目录。cd itheima\n\n\ncd ..\n回退到上一级目录。\n\n\ncd 目录1\\目录2...\n进入多级目录。cd itheima\\JavaSE\n\n\ncd \\\n回退到盘符目录。\n\n\ncls\n清屏。\n\n\nexit\n退出命令提示符窗口。\n\n\n2.2 Path环境变量的配置（应用）2.2.1 为什么配置环境变量开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。\n注意：目前较新的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。\n\n但是以前下载的老版本的JDK是没有自动配置的，此时必需要自己配置Path环境变量。\n①JAVA_HOME：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK）\n\n②Path：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置\n\n注意：新版本的JDK只是自动配置了Path，没有自动配置JAVA_HOME。\n2.3 HelloWorld案例（应用）HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。\n2.3.1 Java程序开发运行流程开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。\n2.3.2 HelloWorld案例的编写1、新建文本文档文件，修改名称为HelloWorld.java。\n2、用记事本打开HelloWorld.java文件，输写程序内容。\npublic class HelloWorld &#123;\tpublic static void main(String[] args) &#123;\t\tSystem.out.println(&quot;HelloWorld&quot;);\t&#125;&#125;\n\n2.3.3 HelloWorld案例的编译和运行存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。\n\n编译：javac 文件名.java\n范例：javac HelloWorld.java\n执行：java 类名\n范例：java HelloWorld\n\n2.4 HelloWorld案例常见问题（理解）2.4.1 BUG在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。\n2.4.2 BUG的解决1、具备识别BUG的能力：多看\n2、具备分析BUG的能力：多思考，多查资料\n3、具备解决BUG的能力：多尝试，多总结\n2.4.3 HelloWorld案例常见问题1、非法字符问题。Java中的符号都是英文格式的。\n2、大小写问题。Java语言对大小写敏感（区分大小写）。\n3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。\n4、编译命令后的java文件名需要带文件后缀.java\n5、运行命令后的class文件名（类名）不带文件后缀.class\n…\n3、IDEA安装使用参见“IDEA安装详解.pdf”\n4. java基础语法4.1 注释（理解）注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种：\n单行注释。单行注释的格式是使用&#x2F;&#x2F;，从&#x2F;&#x2F;开始至本行结尾的文字将作为注释文字。\n// 这是单行注释文字\n\n多行注释。多行注释的格式是使用&#x2F;* 和 *&#x2F;将一段较长的注释括起来。\n/*这是多行注释文字这是多行注释文字这是多行注释文字*/注意：多行注释不能嵌套使用。\n\n文档注释。文档注释以/**开始，以*/结束。（以后讲）\n4.2 字面量（应用）作用：告诉程序员，数据在程序中的书写格式。\n\n\n\n字面量类型\n说明\n程序中的写法\n\n\n\n整数\n不带小数的数字\n666，-88\n\n\n小数\n带小数的数字\n13.14，-5.21\n\n\n字符\n必须使用单引号，有且仅能一个字符\n‘A’，‘0’，   ‘我’\n\n\n字符串\n必须使用双引号，内容可有可无\n“HelloWorld”，“黑马程序员”\n\n\n布尔值\n布尔值，表示真假，只有两个值：true，false\ntrue 、false\n\n\n空值\n一个特殊的值，空值\n值是：null\n\n\npublic class Demo &#123;    public static void main(String[] args) &#123;        System.out.println(10); // 输出一个整数        System.out.println(5.5); // 输出一个小数        System.out.println(&#x27;a&#x27;); // 输出一个字符        System.out.println(true); // 输出boolean值true        System.out.println(&quot;欢迎来到黑马程序员&quot;); // 输出字符串    &#125;&#125;\n\n\n\n4.3 数据类型（记忆、应用）3.4.1 计算机存储单元l计算机底层都是一些数字电路(理解成开关)，用开表示0、关表示1，这些01的形式就是二进制。\n数据在计算机底层都是采用二进制存储的，l在计算机中认为一个开关表示的0|1称为1位（b），每8位称为一个字节（B）， 所以1B&#x3D;8b\n字节是计算机中数据的最小单位。\n我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”，\n通常用大写字母”B”表示，字节是由连续的8个位组成。\n除了字节外还有一些常用的存储单位，其换算单位如下：\n1B（字节） &#x3D; 8bit\n1KB &#x3D; 1024B\n1MB &#x3D; 1024KB\n1GB &#x3D; 1024MB\n1TB &#x3D; 1024GB\n3.4.2 Java中的数据类型Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。\nJava中的基本数据类型：\n\n\n\n数据类型\n关键字\n内存占用\n取值范围\n\n\n\n整数\nbyte\n1\n负的2的7次方 ~ 2的7次方-1(-128~127)\n\n\n\nshort\n2\n负的2的15次方 ~ 2的15次方-1(-32768~32767)\n\n\n\nint\n4\n负的2的31次方 ~ 2的31次方-1\n\n\n\nlong\n8\n负的2的63次方 ~ 2的63次方-1\n\n\n浮点数\nfloat\n4\n1.401298e-45 ~ 3.402823e+38\n\n\n\ndouble\n8\n4.9000000e-324 ~ 1.797693e+308\n\n\n字符\nchar\n2\n0-65535\n\n\n布尔\nboolean\n1\ntrue，false\n\n\n说明：\n​    e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。\n​    在java中整数默认是int类型，浮点数默认是double类型。\n4.4 变量（应用）3.5.1 变量的定义变量：在程序运行过程中，其值可以发生改变的量。\n从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。\n变量的定义格式：\n数据类型 变量名 = 初始化值; // 声明变量并赋值int age = 18;System.out.println(age);\n\n或者\n// 先声明，后赋值（使用前赋值即可）数据类型 变量名;变量名 = 初始化值;double money;money = 55.5;System.out.println(money);\n\n还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。\nint a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开System.out.println(a);System.out.println(b);int c,d; // 声明int类型的变量c和d，中间使用逗号隔开c = 30;d = 40;System.out.println(c);System.out.println(d);\n\n变量的使用：通过变量名访问即可。\n3.5.2 使用变量时的注意事项\n在同一对花括号中，变量名不能重复。\n变量在使用之前，必须初始化（赋值）。\n定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。\n定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。\n\n4.5 关键字、标志符（记忆、理解）关键字\nJava自己保留的一些单词，作为特殊功能的，例如：public、class、byte、short、int、long、double… \n我们不能用来作为类名或者是变量名称，否则报错。\n注意：关键字很多，不用刻意去记。\n\n\n\nabstract\nassert\nboolean\nbreak\nbyte\n\n\n\ncase\ncatch\nchar\nclass\nconst\n\n\ncontinue\ndefault\ndo\ndouble\nelse\n\n\nenum\nextends\nfinal\nfinally\nfloat\n\n\nfor\ngoto\nif\nimplements\nimport\n\n\ninstanceof\nint\ninterface\nlong\nnative\n\n\nnew\npackage\nprivate\nprotected\npublic\n\n\nreturn\nstrictfp\nshort\nstatic\nsuper\n\n\nswitch\nsynchronized\nthis\nthrow\nthrows\n\n\ntransient\ntry\nvoid\nvolatile\nwhile\n\n\n标志符\n标志符就是由一些字符、符号组合起来的名称，用于给类，方法，变量等起名字的规矩。\n基本要求：由数字、字母、下划线(_)和美元符($)等组成\n强制要求：不能以数字开头、不能是关键字、区分大小写\n基本命令规范\n\n变量名称：满足标识符规则，建议全英文、有意义、首字母小写，满足“驼峰模式”，例如：int studyNumber &#x3D; 59。\n类名称： 满足标识符规则，建议全英文、有意义、首字母大写，满足“驼峰模式”，例如：HelloWorld.java。\n","categories":["Java"],"tags":["Java"]},{"title":"day04 数组","url":"/2022/04/11/day04/","content":"1.数组1.1什么是数组【理解】​    数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 \n1.2数组定义格式【记忆】1.2.1第一种​    数据类型[] 数组名\n​    示例：\nint[] arr;        double[] arr;      char[] arr;\n\n1.2.2第二种​    数据类型 数组名[]\n​    示例：\nint arr[];double arr[];char arr[];\n\n1.3数组动态初始化【应用】1.3.1什么是动态初始化​    数组动态初始化就是只给定数组的长度，由系统给出默认初始化值。\n1.3.2动态初始化格式数据类型[] 数组名 = new 数据类型[数组长度];\n\nint[] arr = new int[3];\n\n1.3.3动态初始化格式详解\n等号左边：\n\nint:数组的数据类型\n\n[]:代表这是一个数组\n\narr:代表数组的名称\n\n\n\n等号右边：\n\nnew:为数组开辟内存空间\n\nint:数组的数据类型\n\n[]:代表这是一个数组\n\n5:代表数组的长度\n\n\n1.4数组元素访问【应用】1.4.1什么是索引​    每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。\n​    这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。     \n1.4.2访问数组元素格式数组名[索引];\n\n1.4.3示例代码public class ArrayDemo &#123;    public static void main(String[] args) &#123;        int[] arr = new int[3];        //输出数组名        System.out.println(arr); //[I@880ec60        //输出数组中的元素        System.out.println(arr[0]);        System.out.println(arr[1]);        System.out.println(arr[2]);    &#125;&#125;\n\n1.5内存分配【理解】1.5.1内存概述​    内存是计算机中的重要原件，临时存储区域，作用是运行程序。\n​    我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。\n​    必须放进内存中才能运行，运行完毕后会清空内存。 \n​    Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 \n1.5.2java中的内存分配\n目前我们只需要记住两个内存，分别是：栈内存和堆内存\n\n\n\n\n区域名称\n作用\n\n\n\n寄存器\n给CPU使用，和我们开发无关。\n\n\n本地方法栈\nJVM在使用操作系统功能的时候使用，和我们开发无关。\n\n\n方法区\n存储可以运行的class文件。\n\n\n堆内存\n存储对象或者数组，new来创建的，都存储在堆内存。\n\n\n方法栈\n方法运行时使用的内存，比如main方法运行，进入方法栈中执行。\n\n\n1.6单个数组的内存图【理解】1.7多个数组的内存图【理解】1.8多个数组指向相同内存图【理解】1.9数组静态初始化【应用】1.9.1什么是静态初始化​    在创建数组时，直接将元素确定    \n1.9.2静态初始化格式\n完整版格式\n数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,...&#125;;\n\n简化版格式\n数据类型[] 数组名 = &#123;元素1,元素2,...&#125;;\n\n1.9.3示例代码public class ArrayDemo &#123;    public static void main(String[] args) &#123;        //定义数组        int[] arr = &#123;1, 2, 3&#125;;        //输出数组名        System.out.println(arr);        //输出数组中的元素        System.out.println(arr[0]);        System.out.println(arr[1]);        System.out.println(arr[2]);    &#125;&#125;\n\n1.10数组操作的两个常见小问题【应用】1.10.1索引越界异常\n出现原因\npublic class ArrayDemo &#123;    public static void main(String[] args) &#123;        int[] arr = new int[3];        System.out.println(arr[3]);    &#125;&#125;\n\n数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。\n程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 \n\n解决方案\n将错误的索引修改为正确的索引范围即可！\n\n\n1.10.2空指针异常\n出现原因\npublic class ArrayDemo &#123;    public static void main(String[] args) &#123;        int[] arr = new int[3];        //把null赋值给数组        arr = null;        System.out.println(arr[0]);    &#125;&#125;\n\narr &#x3D; null 这行代码，意味着变量arr将不会再保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。\n\n解决方案\n给数组一个真正的堆内存空间引用即可！\n\n\n1.11数组遍历【应用】\n数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。\npublic class ArrayTest01 &#123;\tpublic static void main(String[] args) &#123;\t\tint[] arr = &#123; 1, 2, 3, 4, 5 &#125;;\t\tSystem.out.println(arr[0]);\t\tSystem.out.println(arr[1]);\t\tSystem.out.println(arr[2]);\t\tSystem.out.println(arr[3]);\t\tSystem.out.println(arr[4]);\t&#125;&#125;\n\n以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现。 \npublic class ArrayTest01 &#123;    public static void main(String[] args) &#123;        //定义数组        int[] arr = &#123;11, 22, 33, 44, 55&#125;;        //使用通用的遍历格式        for(int x = 0; x &lt; arr.length; x++) &#123;            System.out.println(arr[x]);        &#125;    &#125;&#125;\n\n1.12数组最值【应用】\n最大值获取：从数组的所有元素中找出最大值。\n\n实现思路：\n\n定义变量，保存数组0索引上的元素\n遍历数组，获取出数组中的每个元素\n将遍历到的元素和保存数组0索引上值的变量进行比较\n如果数组元素的值大于了变量的值，变量记录住新的值\n数组循环遍历结束，变量保存的就是数组中的最大值\n\n\n代码实现：\npublic class ArrayTest02 &#123;    public static void main(String[] args) &#123;        //定义数组        int[] arr = &#123;12, 45, 98, 73, 60&#125;;        //定义一个变量，用于保存最大值        //取数组中第一个数据作为变量的初始值        int max = arr[0];        //与数组中剩余的数据逐个比对，每次比对将最大值保存到变量中        for(int x=1; x&lt;arr.length; x++) &#123;            if(arr[x] &gt; max) &#123;                max = arr[x];            &#125;        &#125;        //循环结束后打印变量的值        System.out.println(&quot;max:&quot; + max);    &#125;&#125;\n\n","categories":["Java"],"tags":["Java"]},{"title":"day03 流程控制语句","url":"/2022/04/11/day03/","content":"1、流程控制语句（应用）在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。\n1.1 流程控制语句分类​    顺序结构\n​    分支结构(if, switch)\n​    循环结构(for, while, do…while)\n1.2 顺序结构顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。\n顺序结构执行流程图：\n\n1.3 分支结构：if语句if语句格式1格式：if (关系表达式) &#123;    语句体;\t&#125;\n\n执行流程：\n①首先计算关系表达式的值\n②如果关系表达式的值为true就执行语句体\n③如果关系表达式的值为false就不执行语句体\n④继续执行后面的语句内容\n\n示例：\npublic class IfDemo &#123;\tpublic static void main(String[] args) &#123;\t\tSystem.out.println(&quot;开始&quot;);\t\t\t//定义两个变量\t\tint a = 10;\t\tint b = 20;\t\t\t//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b\t\tif(a == b) &#123;\t\t\tSystem.out.println(&quot;a等于b&quot;);\t\t&#125;\t\t\t\t//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c\t\tint c = 10;\t\tif(a == c) &#123;\t\t\tSystem.out.println(&quot;a等于c&quot;);\t\t&#125;\t\t\t\tSystem.out.println(&quot;结束&quot;);\t&#125;&#125;\n\nif语句格式2格式：if (关系表达式) &#123;    语句体1;\t&#125; else &#123;    语句体2;\t&#125;\n\n执行流程：\n①首先计算关系表达式的值\n②如果关系表达式的值为true就执行语句体1\n③如果关系表达式的值为false就执行语句体2\n④继续执行后面的语句内容\n\n示例：\npublic class IfDemo02 &#123;\tpublic static void main(String[] args) &#123;\t\tSystem.out.println(&quot;开始&quot;);\t\t\t\t//定义两个变量\t\tint a = 10;\t\tint b = 20;\t\tb = 5;\t\t\t//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b\t\tif(a &gt; b) &#123;\t\t\tSystem.out.println(&quot;a的值大于b&quot;);\t\t&#125; else &#123;\t\t\tSystem.out.println(&quot;a的值不大于b&quot;);\t\t&#125;\t\t\t\tSystem.out.println(&quot;结束&quot;);\t&#125;&#125;\n\nif语句案例：奇偶数\n需求：任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。\n分析：\n​    ①为了体现任意给出一个整数，采用键盘录入一个数据\n​    ②判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构\n​    ③判断是否偶数需要使用取余运算符实现该功能 number % 2 &#x3D;&#x3D; 0\n​    ④根据判定情况，在控制台输出对应的内容\nimport java.util.Scanner;public class IfTest01 &#123;\tpublic static void main(String[] args) &#123;\t\t//为了体现任意给出一个整数，采用键盘录入一个数据。(导包，创建对象，接收数据)\t\tScanner sc = new Scanner(System.in);\t\t\t\tSystem.out.println(&quot;请输入一个整数：&quot;);\t\tint number = sc.nextInt();\t\t\t//判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构\t\t\t\t//判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0\t\t//根据判定情况，在控制台输出对应的内容\t\tif(number%2 == 0) &#123;\t\t\tSystem.out.println(number + &quot;是偶数&quot;);\t\t&#125; else &#123;\t\t\tSystem.out.println(number + &quot;是奇数&quot;);\t\t&#125;\t\t&#125;&#125;\n\nif语句格式3格式：if (关系表达式1) &#123;    语句体1;\t&#125; else if (关系表达式2) &#123;    语句体2;\t&#125; …else &#123;    语句体n+1;&#125;\n\n执行流程：\n①首先计算关系表达式1的值\n②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值\n③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值\n④…\n⑤如果没有任何关系表达式为true，就执行语句体n+1。\n\n示例：键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日\nimport java.util.Scanner;public class IfDemo03 &#123;\tpublic static void main(String[] args) &#123;\t\tSystem.out.println(&quot;开始&quot;);\t\t// 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日\t\tScanner sc = new Scanner(System.in);\t\tSystem.out.println(&quot;请输入一个星期数(1-7)：&quot;);\t\tint week = sc.nextInt();\t\tif(week == 1) &#123;\t\t\tSystem.out.println(&quot;星期一&quot;);\t\t&#125; else if(week == 2) &#123;\t\t\tSystem.out.println(&quot;星期二&quot;);\t\t&#125; else if(week == 3) &#123;\t\t\tSystem.out.println(&quot;星期三&quot;);\t\t&#125; else if(week == 4) &#123;\t\t\tSystem.out.println(&quot;星期四&quot;);\t\t&#125; else if(week == 5) &#123;\t\t\tSystem.out.println(&quot;星期五&quot;);\t\t&#125; else if(week == 6) &#123;\t\t\tSystem.out.println(&quot;星期六&quot;);\t\t&#125; else &#123;\t\t\tSystem.out.println(&quot;星期日&quot;);\t\t&#125;\t\t\tSystem.out.println(&quot;结束&quot;);\t&#125;&#125;\n\nif语句格式3案例：\n需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。\n分析：\n​    ①小明的考试成绩未知，可以使用键盘录入的方式获取值\n​    ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现\n​    ③为每种判断设置对应的条件\n​    ④为每种判断设置对应的奖励\n1.4 分支结构：switch语句switch语句结构（掌握）\n格式\nswitch (表达式) &#123;\tcase 1:\t\t语句体1;\t\tbreak;\tcase 2:\t\t语句体2;\t\tbreak;\t...\tdefault:\t\t语句体n+1;\t\tbreak;&#125;\n\n执行流程：\n\n首先计算出表达式的值 \n其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 \n最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。\n\n\n\nswitch语句练习-春夏秋冬（应用）\n需求：一年有12个月，分属于春夏秋冬4个季节，键盘录入一个月份，请用程序实现判断该月份属于哪个季节，并输出。 \n运行结果：\n\n春：3、4、5夏：6、7、8秋：9、10、11冬：1、2、12\n\n\n示例代码：\n\npublic class Demo1 &#123;    public static void main(String[] args) &#123;        //键盘录入月份数据，使用变量接收        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入一个月份：&quot;);        int month = sc.nextInt();        //case穿透        switch(month) &#123;            case 1:            case 2:            case 12:                System.out.println(&quot;冬季&quot;);                break;            case 3:            case 4:            case 5:                System.out.println(&quot;春季&quot;);                break;            case 6:            case 7:            case 8:                System.out.println(&quot;夏季&quot;);                break;            case 9:            case 10:            case 11:                System.out.println(&quot;秋季&quot;);                break;            default:                System.out.println(&quot;你输入的月份有误&quot;);        &#125;    &#125;&#125;\n\n\n注意：如果switch中得case，没有对应break的话，则会出现case穿透的现象。\n\n1.5 循环结构：for循环for循环结构（掌握）\n循环：\n循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。 \n\nfor循环格式：\n\n\nfor (初始化语句;条件判断语句;条件控制语句) &#123;\t循环体语句;&#125;\n\n\n格式解释：\n\n初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样\n条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去\n循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情\n条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去\n\n\n执行流程：\n①执行初始化语句\n②执行条件判断语句，看其结果是true还是false\n​             如果是false，循环结束\n​             如果是true，继续执行\n③执行循环体语句\n④执行条件控制语句\n⑤回到②继续\n\n\nfor循环练习-输出数据（应用）\n需求：在控制台输出1-5和5-1的数据 \n示例代码：\n\npublic class ForTest01 &#123;    public static void main(String[] args) &#123;\t\t//需求：输出数据1-5        for(int i=1; i&lt;=5; i++) &#123;\t\t\tSystem.out.println(i);\t\t&#125;\t\tSystem.out.println(&quot;--------&quot;);\t\t//需求：输出数据5-1\t\tfor(int i=5; i&gt;=1; i--) &#123;\t\t\tSystem.out.println(i);\t\t&#125;    &#125;&#125;\n\nfor循环练习-求和（应用）\n需求：求1-5之间的数据和，并把求和结果在控制台输出  \n示例代码：\n\npublic class ForTest02 &#123;    public static void main(String[] args) &#123;\t\t//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0\t\tint sum = 0;\t\t//从1开始到5结束的数据，使用循环结构完成\t\tfor(int i=1; i&lt;=5; i++) &#123;\t\t\t//将反复进行的事情写入循环结构内部             // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中\t\t\tsum += i;\t\t\t/*\t\t\t\tsum += i;\tsum = sum + i;\t\t\t\t第一次：sum = sum + i = 0 + 1 = 1;\t\t\t\t第二次：sum = sum + i = 1 + 2 = 3;\t\t\t\t第三次：sum = sum + i = 3 + 3 = 6;\t\t\t\t第四次：sum = sum + i = 6 + 4 = 10;\t\t\t\t第五次：sum = sum + i = 10 + 5 = 15;\t\t\t*/\t\t&#125;\t\t//当循环执行完毕时，将最终数据打印出来\t\tSystem.out.println(&quot;1-5之间的数据和是：&quot; + sum);    &#125;&#125;\n\n\n本题要点：\n今后遇到的需求中，如果带有求和二字，请立即联想到求和变量\n求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的\n\n\n\nfor循环练习-求偶数和（应用）\n需求：求1-100之间的偶数和，并把求和结果在控制台输出 }\n示例代码：\n\npublic class ForTest03 &#123;    public static void main(String[] args) &#123;\t\t//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0\t\tint sum = 0;\t\t//对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同\t\tfor(int i=1; i&lt;=100; i++) &#123;\t\t\t//对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数\t\t\tif(i%2 == 0) &#123;\t\t\t\tsum += i;\t\t\t&#125;\t\t&#125;\t\t//当循环执行完毕时，将最终数据打印出来\t\tSystem.out.println(&quot;1-100之间的偶数和是：&quot; + sum);    &#125;&#125;\n\nfor循环练习-水仙花（应用）\n需求：在控制台输出所有的“水仙花数” \n解释：什么是水仙花数？\n水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数\n例如153  3*3*3 + 5*5*5 + 1*1*1 = 153\n\n\n\n\n思路：\n获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取\n获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数\n\n\n示例代码\n\npublic class ForTest04 &#123;    public static void main(String[] args) &#123;\t\t//输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束\t\tfor(int i=100; i&lt;1000; i++) &#123;\t\t\t//在计算之前获取三位数中每个位上的值\t\t\tint ge = i%10;\t\t\tint shi = i/10%10;\t\t\tint bai = i/10/10%10;\t\t\t\t\t\t//判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等\t\t\tif(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123;\t\t\t\t//输出满足条件的数字就是水仙花数\t\t\t\tSystem.out.println(i);\t\t\t&#125;\t\t&#125;    &#125;&#125;\n\nfor循环练习-统计水仙花数个数（应用）\n需求：统计“水仙花数”一共有多少个，并在控制台输出个数 \n示例代码：\n\npublic class ForTest05 &#123;    public static void main(String[] args) &#123;\t\t//定义变量count，用于保存“水仙花数”的数量，初始值为0\t\tint count = 0;\t\t//输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束\t\tfor(int i=100; i&lt;1000; i++) &#123;\t\t\t//在计算之前获取三位数中每个位上的值\t\t\tint ge = i%10;\t\t\tint shi = i/10%10;\t\t\tint bai = i/10/10%10;\t\t\t//在判定水仙花数的过程中，满足条件不再输出，更改为修改count的值，使count+1\t\t\tif(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123;\t\t\t\tcount++;\t\t\t&#125;\t\t&#125;\t\t//打印输出最终结果\t\tSystem.out.println(&quot;水仙花共有：&quot; + count + &quot;个&quot;);    &#125;&#125;\n\n\n本题要点：\n今后如果需求带有统计xxx，请先想到计数器变量\n计数器变量定义的位置，必须在循环外部\n\n\n\n1.6 循环结构： while循环while结构（掌握）\nwhile循环完整格式：\n初始化语句;while (条件判断语句) &#123;\t循环体语句;    条件控制语句;&#125;\n\nwhile循环执行流程：\n①执行初始化语句\n②执行条件判断语句，看其结果是true还是false\n​             如果是false，循环结束\n​             如果是true，继续执行\n③执行循环体语句\n④执行条件控制语句\n⑤回到②继续\n\n示例代码：\n\n\npublic class WhileDemo &#123;    public static void main(String[] args) &#123;        //需求：在控制台输出5次&quot;HelloWorld&quot;\t\t//for循环实现\t\tfor(int i=1; i&lt;=5; i++) &#123;\t\t\tSystem.out.println(&quot;HelloWorld&quot;);\t\t&#125;\t\tSystem.out.println(&quot;--------&quot;);\t\t//while循环实现\t\tint j = 1;\t\twhile(j&lt;=5) &#123;\t\t\tSystem.out.println(&quot;HelloWorld&quot;);\t\t\tj++;\t\t&#125;    &#125;&#125;\n\nwhile循环练习-珠穆朗玛峰（应用）\n需求：世界最高山峰是珠穆朗玛峰(8844.43米&#x3D;8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度?\n示例代码：\n\npublic class WhileTest &#123;    public static void main(String[] args) &#123;\t\t//定义一个计数器，初始值为0\t\tint count = 0;\t\t//定义纸张厚度\t\tdouble paper = 0.1;\t\t//定义珠穆朗玛峰的高度\t\tint zf = 8844430;\t\t//因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环\t\t//折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度\t\twhile(paper &lt;= zf) &#123;\t\t\t//循环的执行过程中每次纸张折叠，纸张的厚度要加倍\t\t\tpaper *= 2;\t\t\t//在循环中执行累加，对应折叠了多少次\t\t\tcount++;\t\t&#125;\t\t//打印计数器的值\t\tSystem.out.println(&quot;需要折叠：&quot; + count + &quot;次&quot;);    &#125;&#125;\n\n1.7 循环结构：do-while循环do…while循环结构（掌握）\n完整格式：\n初始化语句;do &#123;\t循环体语句;\t条件控制语句;&#125;while(条件判断语句);\n\n执行流程：\n① 执行初始化语句\n② 执行循环体语句\n③ 执行条件控制语句\n④ 执行条件判断语句，看其结果是true还是false\n如果是false，循环结束\n如果是true，继续执行\n⑤ 回到②继续\n\n示例代码：\n\n\npublic class DoWhileDemo &#123;    public static void main(String[] args) &#123;        //需求：在控制台输出5次&quot;HelloWorld&quot;\t\t//for循环实现\t\tfor(int i=1; i&lt;=5; i++) &#123;\t\t\tSystem.out.println(&quot;HelloWorld&quot;);\t\t&#125;\t\tSystem.out.println(&quot;--------&quot;);\t\t//do...while循环实现\t\tint j = 1;\t\tdo &#123;\t\t\tSystem.out.println(&quot;HelloWorld&quot;);\t\t\tj++;\t\t&#125;while(j&lt;=5);    &#125;&#125;\n\n1.8 三种循环的区别（理解）\n三种循环的区别\nfor循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）\ndo…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）\n\n\nfor循环和while的区别\n条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了\n条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用\n\n\n死循环（无限循环）的三种格式\nfor(;;){}\nwhile(true){}\ndo {} while(true);\n\n\n\n1.9  跳转控制语句（掌握）\n跳转控制语句（break）\n跳出循环，结束循环\n\n\n跳转控制语句（continue）\n跳过本次循环，继续下次循环\n\n\n注意： continue只能在循环中进行使用！\n\n1.10 循环嵌套（理解）\n循环嵌套概述：在循环中，继续定义循环\n\n示例代码：\npublic static void main(String[] args) &#123;       //外循环控制小时的范围，内循环控制分钟的范围       for (int hour = 0; hour &lt; 24; hour++) &#123;           for (int minute = 0; minute &lt; 60; minute++) &#123;               System.out.println(hour + &quot;时&quot; + minute + &quot;分&quot;);           &#125;           System.out.println(&quot;--------&quot;);       &#125;   &#125;\n\n理解：\n\n请反复理解这句话（整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的）\n\n\n结论：\n\n外循环执行一次，内循环执行一圈\n\n\n\n1.11 RandomRandom产生随机数（掌握）\n概述：\n\nRandom类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能\nAPI后续课程详细讲解，现在可以简单理解为Java已经写好的代码\n\n\n\n\n使用步骤：\n\n导入包\nimport java.util.Random;\n\n创建对象\nRandom r &#x3D; new Random();\n\n产生随机数\nint num &#x3D; r.nextInt(10);\n解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19\n\n\n\n示例代码：\n\n\nimport java.util.Random;public class RandomDemo &#123;\tpublic static void main(String[] args) &#123;\t\t//创建对象\t\tRandom r = new Random();\t\t//用循环获取10个随机数\t\tfor(int i=0; i&lt;10; i++) &#123;\t\t\t//获取随机数\t\t\tint number = r.nextInt(10);\t\t\tSystem.out.println(&quot;number:&quot; + number);\t\t&#125;\t\t//需求：获取一个1-100之间的随机数\t\tint x = r.nextInt(100) + 1;\t\tSystem.out.println(x);\t&#125;&#125;\n\nRandom练习-猜数字（应用）\n需求：\n程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？\n当猜错的时候根据不同情况给出相应的提示\nA. 如果猜的数字比真实数字大，提示你猜的数据大了\nB. 如果猜的数字比真实数字小，提示你猜的数据小了\nC. 如果猜的数字与真实数字相等，提示恭喜你猜中了\n\n示例代码：\n\n\nimport java.util.Random;import java.util.Scanner;public class RandomTest &#123;\tpublic static void main(String[] args) &#123;\t\t//要完成猜数字的游戏，首先需要有一个要猜的数字，使用随机数生成该数字，范围1到100\t\tRandom r = new Random();\t\tint number = r.nextInt(100) + 1;\t\t\t\twhile(true) &#123;\t\t\t//使用程序实现猜数字，每次均要输入猜测的数字值，需要使用键盘录入实现\t\t\tScanner sc = new Scanner(System.in);\t\t\t\t\t\tSystem.out.println(&quot;请输入你要猜的数字：&quot;);\t\t\tint guessNumber = sc.nextInt();\t\t\t\t\t\t//比较输入的数字和系统产生的数据，需要使用分支语句。             //这里使用if..else..if..格式，根据不同情况进行猜测结果显示\t\t\tif(guessNumber &gt; number) &#123;\t\t\t\tSystem.out.println(&quot;你猜的数字&quot; + guessNumber + &quot;大了&quot;);\t\t\t&#125; else if(guessNumber &lt; number) &#123;\t\t\t\tSystem.out.println(&quot;你猜的数字&quot; + guessNumber + &quot;小了&quot;);\t\t\t&#125; else &#123;\t\t\t\tSystem.out.println(&quot;恭喜你猜中了&quot;);\t\t\t\tbreak;\t\t\t&#125;\t\t&#125;\t\t\t&#125;&#125;\n\n","categories":["Java"],"tags":["Java"]},{"title":"day06 Debug模式","url":"/2022/04/11/day06/","content":"1.Debug模式1.1什么是Debug模式是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。\n1.2Debug模式操作流程\n如何加断点\n\n选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可\n\n\n\n如何运行加了断点的程序\n\n在代码区域右键Debug执行\n\n\n\n看哪里\n\n看Debugger窗口\n\n\n\n看Console窗口\n\n\n\n点哪里\n\n点Step Into (F7)这个箭头，也可以直接按F7\n\n\n\n如何删除断点\n\n选择要删除的断点，单击鼠标左键即可\n\n\n\n如果是多个断点，可以每一个再点击一次。也可以一次性全部删除\n\n\n\n\n2.基础练习（参考题目）2.1减肥计划if版本2.1.1案例需求​    输入星期数，显示今天的减肥活动​          周一：跑步​          周二：游泳​          周三：慢走​          周四：动感单车​          周五：拳击​          周六：爬山​          周日：好好吃一顿\n2.1.2代码实现/*    思路：        1:键盘录入一个星期数，用一个变量接收        2:对星期数进行判断，这里用 if 语句实现        3:在对应的语句控制中输出对应的减肥活动 */public class Test01 &#123;    public static void main(String[] args) &#123;        //键盘录入一个星期数，用一个变量接收        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入一个星期数：&quot;);        int week = sc.nextInt();        //对星期数进行判断，这里用 if 语句实现        if (week &lt; 1 || week &gt; 7) &#123;            System.out.println(&quot;你输入的星期数有误&quot;);        &#125; else if (week == 1) &#123;            System.out.println(&quot;跑步&quot;);        &#125; else if (week == 2) &#123;            System.out.println(&quot;游泳&quot;);        &#125; else if (week == 3) &#123;            System.out.println(&quot;慢走&quot;);        &#125; else if (week == 4) &#123;            System.out.println(&quot;动感单车&quot;);        &#125; else if (week == 5) &#123;            System.out.println(&quot;拳击&quot;);        &#125; else if (week == 6) &#123;            System.out.println(&quot;爬山&quot;);        &#125; else &#123;            System.out.println(&quot;好好吃一顿&quot;);        &#125;    &#125;&#125;\n\n2.2减肥计划switch版本2.2.1案例需求​    输入星期数，显示今天的减肥活动​          周一：跑步​          周二：游泳​          周三：慢走​          周四：动感单车​          周五：拳击​          周六：爬山​          周日：好好吃一顿\n2.2.2代码实现/*    思路：        1:键盘录入一个星期数，用一个变量接收        2:对星期数进行判断，这里用 switch 语句实现        3:在对应的语句控制中输出对应的减肥活动    导包：        1:手动导包  import java.util.Scanner;        2:快捷键导包 Alt+Enter        3:自动导包 */public class Test02 &#123;    public static void main(String[] args) &#123;        //键盘录入一个星期数，用一个变量接收        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入一个星期数：&quot;);        int week = sc.nextInt();        //对星期数进行判断，这里用 switch 语句实现        switch (week) &#123;            case 1:                System.out.println(&quot;跑步&quot;);                break;            case 2:                System.out.println(&quot;游泳&quot;);                break;            case 3:                System.out.println(&quot;慢走&quot;);                break;            case 4:                System.out.println(&quot;动感单车&quot;);                break;            case 5:                System.out.println(&quot;拳击&quot;);                break;            case 6:                System.out.println(&quot;爬山&quot;);                break;            case 7:                System.out.println(&quot;好好吃一顿&quot;);                break;            default:                System.out.println(&quot;你输入的星期数有误&quot;);        &#125;    &#125;&#125;\n\n2.3逢七跳过2.3.1案例需求​    朋友聚会的时候可能会玩一个游戏：逢七过。​        规则是：从任意一个数字开始报数，当你要报的数字包含7或者是7的倍数时都要说：过。​        为了帮助大家更好的玩这个游戏，这里我们直接在控制台打印出1-100之间的满足逢七必过规则的数据。​        这样，大家将来在玩游戏的时候，就知道哪些数据要说：过。    \n2.3.2代码实现/*    思路：        1:数据在1-100之间，用for循环实现数据的获取        2:根据规则，用if语句实现数据的判断：要么个位是7，要么十位是7，要么能够被7整除        3:在控制台输出满足规则的数据 */public class Test03 &#123;    public static void main(String[] args) &#123;        //数据在1-100之间，用for循环实现数据的获取        for(int x=1; x&lt;=100; x++) &#123;            //根据规则，用if语句实现数据的判断：要么个位是7，要么十位是7，要么能够被7整除            if(x%10==7 || x/10%10==7 || x%7==0) &#123;                //在控制台输出满足规则的数据                System.out.println(x);            &#125;        &#125;    &#125;&#125;\n\n2.4不死神兔2.4.1案例需求​    有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，​        假如兔子都不死，问第二十个月的兔子对数为多少？    \n2.4.2代码实现/*   思路：        1:为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20        2:因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1        3:用循环实现计算每个月的兔子对数        4:输出数组中最后一个元素的值，就是第20个月的兔子对数 */public class Test04 &#123;    public static void main(String[] args) &#123;        //为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20        int[] arr = new int[20];        //因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1        arr[0] = 1;        arr[1] = 1;        //用循环实现计算每个月的兔子对数        for(int x=2; x&lt;arr.length; x++) &#123;            arr[x] = arr[x-2] + arr[x-1];        &#125;        //输出数组中最后一个元素的值，就是第20个月的兔子对数        System.out.println(&quot;第二十个月兔子的对数是：&quot; + arr[19]);    &#125;&#125;\n\n2.5百钱白鸡2.5.1案例需求​    我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。​        百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？\n2.5.2代码实现/*    思路：        1:第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x&lt;=20        2:第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y&lt;=33        3:这个时候，用于表示鸡雏的变量 z = 100 – x – y        4:判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立，如果成立，输出对应的 x，y，z 的值，就是对应的鸡翁，鸡母，鸡雏的值 */public class Test05 &#123;    public static void main(String[] args) &#123;        //第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x&lt;=20        for(int x=0; x&lt;=20; x++) &#123;            //第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y&lt;=33            for(int y=0; y&lt;=33; y++) &#123;                //这个时候，用于表示鸡雏的变量 z = 100 – x – y                int z = 100 - x - y;                //判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立                if(z%3==0 &amp;&amp; 5*x+3*y+z/3==100) &#123;                    System.out.println(x+&quot;,&quot;+y+&quot;,&quot;+z);                &#125;            &#125;        &#125;    &#125;&#125;\n\n2.6数组元素求和2.6.1案例需求​    有这样的一个数组，元素是{68,27,95,88,171,996,51,210}。求出该数组中满足要求的元素和，​        要求是：求和的元素个位和十位都不能是7，并且只能是偶数\n2.6.2代码实现/*   思路：        1:定义一个数组，用静态初始化完成数组元素的初始化        2:定义一个求和变量，初始值是0        3:遍历数组，获取到数组中的每一个元素        4:判断该元素是否满足条件，如果满足条件就累加        5:输出求和变量的值 */public class Test06 &#123;    public static void main(String[] args) &#123;        //定义一个数组，用静态初始化完成数组元素的初始化        int[] arr = &#123;68, 27, 95, 88, 171, 996, 51, 210&#125;;        //定义一个求和变量，初始值是0        int sum = 0;        //遍历数组，获取到数组中的每一个元素        for(int x=0; x&lt;arr.length; x++) &#123;            //判断该元素是否满足条件，如果满足条件就累加            if(arr[x]%10!=7 &amp;&amp; arr[x]/10%10!=7 &amp;&amp; arr[x]%2==0) &#123;                sum += arr[x];            &#125;        &#125;        //输出求和变量的值        System.out.println(&quot;sum:&quot; + sum);    &#125;&#125;\n\n2.7判断两个数组是否相同2.7.1案例需求​    定义一个方法，用于比较两个数组的内容是否相同\n2.7.2代码实现/*    思路：        1:定义两个数组，分别使用静态初始化完成数组元素的初始化        2:定义一个方法，用于比较两个数组的内容是否相同        3:比较两个数组的内容是否相同，按照下面的步骤实现就可以了            首先比较数组长度，如果长度不相同，数组内容肯定不相同，返回false            其次遍历，比较两个数组中的每一个元素，只要有元素不相同，返回false            最后循环遍历结束后，返回true        4:调用方法，用变量接收        5:输出结果 */public class Test07 &#123;    public static void main(String[] args) &#123;        //定义两个数组，分别使用静态初始化完成数组元素的初始化        int[] arr = &#123;11, 22, 33, 44, 55&#125;;        //int[] arr2 = &#123;11, 22, 33, 44, 55&#125;;        int[] arr2 = &#123;11, 22, 33, 44, 5&#125;;        //调用方法，用变量接收        boolean flag = compare(arr,arr2);        //输出结果        System.out.println(flag);    &#125;    //定义一个方法，用于比较两个数组的内容是否相同    /*        两个明确：            返回值类型：boolean            参数：int[] arr, int[] arr2     */    public static boolean compare(int[] arr, int[] arr2) &#123;        //首先比较数组长度，如果长度不相同，数组内容肯定不相同，返回false        if(arr.length != arr2.length) &#123;            return false;        &#125;        //其次遍历，比较两个数组中的每一个元素，只要有元素不相同，返回false        for(int x=0; x&lt;arr.length; x++) &#123;            if(arr[x] != arr2[x]) &#123;                return false;            &#125;        &#125;        //最后循环遍历结束后，返回true        return true;    &#125;&#125;\n\n2.8查找元素在数组中出现的索引位置2.8.1案例需求​    已知一个数组 arr &#x3D; {19, 28, 37, 46, 50}; 键盘录入一个数据，查找该数据在数组中的索引。\n​    并在控制台输出找到的索引值。如果没有查找到，则输出-1\n2.8.2代码实现/*    思路：        1:定义一个数组，用静态初始化完成数组元素的初始化        2:键盘录入要查找的数据，用一个变量接收        3:定义一个索引变量，初始值为-1        4:遍历数组，获取到数组中的每一个元素        5:拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量,并结束循环        6:输出索引变量 */public class Test08 &#123;    public static void main(String[] args) &#123;        //定义一个数组，用静态初始化完成数组元素的初始化        int[] arr = &#123;19, 28, 37, 46, 50&#125;;        //键盘录入要查找的数据，用一个变量接收        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入要查找的数据：&quot;);        int number = sc.nextInt();        //调用方法        int index = getIndex(arr, number);        //输出索引变量        System.out.println(&quot;index: &quot; + index);    &#125;    //查找指定的数据在数组中的索引    /*        两个明确：            返回值类型：int            参数：int[] arr, int number     */    public static int getIndex(int[] arr, int number) &#123;        //定义一个索引变量，初始值为-1        int index = -1;        //遍历数组，获取到数组中的每一个元素        for(int x=0; x&lt;arr.length; x++) &#123;            //拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量,并结束循环            if(arr[x] == number) &#123;                index = x;                break;            &#125;        &#125;        //返回索引        return index;    &#125;&#125;\n\n2.9数组元素反转2.9.1案例需求​    已知一个数组 arr &#x3D; {19, 28, 37, 46, 50}; 用程序实现把数组中的元素值交换，​        交换后的数组 arr &#x3D; {50, 46, 37, 28, 19}; 并在控制台输出交换后的数组元素。\n2.9.2代码实现/*    思路：        1:定义一个数组，用静态初始化完成数组元素的初始化        2:循环遍历数组，这一次初始化语句定义两个索引变量，判断条件是开始索引小于等于结束索引        3:变量交换        4:遍历数组 */public class Test09 &#123;    public static void main(String[] args) &#123;        //定义一个数组，用静态初始化完成数组元素的初始化        int[] arr = &#123;19, 28, 37, 46, 50&#125;;        //调用反转的方法        reverse(arr);        //遍历数组        printArray(arr);    &#125;    /*        两个明确：            返回值类型：void            参数：int[] arr     */    public static void reverse(int[] arr) &#123;        //循环遍历数组，这一次初始化语句定义两个索引变量，判断条件是开始索引小于等于结束索引        for (int start = 0, end = arr.length - 1; start &lt;= end; start++, end--) &#123;            //变量交换            int temp = arr[start];            arr[start] = arr[end];            arr[end] = temp;        &#125;    &#125;    /*        两个明确：            返回值类型：void            参数：int[] arr     */    public static void printArray(int[] arr) &#123;        System.out.print(&quot;[&quot;);        for (int x = 0; x &lt; arr.length; x++) &#123;            if (x == arr.length - 1) &#123;                System.out.print(arr[x]);            &#125; else &#123;                System.out.print(arr[x] + &quot;, &quot;);            &#125;        &#125;        System.out.println(&quot;]&quot;);    &#125;&#125;\n\n2.10评委打分2.10.1案例需求​    在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。​        选手的最后得分为：去掉一个最高分和一个最低分后 的4个评委平均值 (不考虑小数部分)。\n2.10.2代码实现/*    思路：        1:定义一个数组，用动态初始化完成数组元素的初始化，长度为6        2:键盘录入评委分数        3:由于是6个评委打分，所以，接收评委分数的操作，用循环改进        4:定义方法实现获取数组中的最高分(数组最大值)，调用方法        5:定义方法实现获取数组中的最低分(数组最小值) ，调用方法        6:定义方法实现获取数组中的所有元素的和(数组元素求和) ，调用方法        7:按照计算规则进行计算得到平均分        8:输出平均分 */public class Test10 &#123;    public static void main(String[] args) &#123;        //定义一个数组，用动态初始化完成数组元素的初始化，长度为6        int[] arr = new int[6];        //键盘录入评委分数        Scanner sc = new Scanner(System.in);        //由于是6个评委打分，所以，接收评委分数的操作，用循环改进        for(int x=0; x&lt;arr.length; x++) &#123;            System.out.println(&quot;请输入第&quot; + (x + 1) + &quot;个评委的打分：&quot;);            arr[x] = sc.nextInt();        &#125;        //printArray(arr);        //定义方法实现获取数组中的最高分(数组最大值)，调用方法        int max = getMax(arr);        //定义方法实现获取数组中的最低分(数组最小值) ，调用方法        int min = getMin(arr);        //定义方法实现获取数组中的所有元素的和(数组元素求和) ，调用方法        int sum = getSum(arr);        //按照计算规则进行计算得到平均分        int avg = (sum - max - min) / (arr.length - 2);        //输出平均分        System.out.println(&quot;选手的最终得分是：&quot; + avg);    &#125;    /*        两个明确：            返回值类型：int            参数：int[] arr     */    public static int getSum(int[] arr) &#123;        int sum = 0;        for(int x=0; x&lt;arr.length; x++) &#123;            sum += arr[x];        &#125;        return sum;    &#125;    /*        两个明确：            返回值类型：int            参数：int[] arr     */    public static int getMin(int[] arr) &#123;        int min = arr[0];        for(int x=1; x&lt;arr.length; x++) &#123;            if(arr[x] &lt; min) &#123;                min = arr[x];            &#125;        &#125;        return min;    &#125;    /*        两个明确：            返回值类型：int            参数：int[] arr     */    public static int getMax(int[] arr) &#123;        int max = arr[0];        for(int x=1; x&lt;arr.length; x++) &#123;            if(arr[x] &gt; max) &#123;                max = arr[x];            &#125;        &#125;        return max;    &#125;    //遍历数组    public static void printArray(int[] arr) &#123;        System.out.print(&quot;[&quot;);        for (int x = 0; x &lt; arr.length; x++) &#123;            if (x == arr.length - 1) &#123;                System.out.print(arr[x]);            &#125; else &#123;                System.out.print(arr[x] + &quot;, &quot;);            &#125;        &#125;        System.out.println(&quot;]&quot;);    &#125;&#125;\n\n","categories":["Java"],"tags":["Java"]},{"title":"day05 方法概述","url":"/2022/04/11/day05/","content":"1. 方法概述1.1 方法的概念（理解）​    方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集\n\n注意：\n方法必须先创建才可以使用，该过程成为方法定义\n方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用\n\n\n\n2. 方法的定义和调用2.1 无参数方法定义和调用（掌握）\n定义格式：\npublic static void 方法名 (   ) &#123;\t// 方法体;&#125;\n\n范例：\npublic static void method (    ) &#123;\t// 方法体;&#125;\n\n调用格式：\n方法名();\n\n范例：\nmethod();\n\n注意：\n​    方法必须先定义，后调用，否则程序将报错\n\n\n2.2 方法调用过程图解（理解）\n\n总结：每个方法在被调用执行的时候，都会进入栈内存，并且拥有自己独立的内存空间，方法内部代码调用完毕之后，会从栈内存中弹栈消失。\n\n2.3 无参数方法的练习（应用）\n需求：设计一个方法用于打印两个数中的较大数 \n思路：\n①定义一个方法，用于打印两个数字中的较大数，例如getMax() \n②方法中定义两个变量，用于保存两个数字 \n③使用分支语句分两种情况对两个数字的大小关系进行处理 \n④在main()方法中调用定义好的方法\n\n\n代码：\n\npublic class MethodTest &#123;    public static void main(String[] args) &#123;        //在main()方法中调用定义好的方法        getMax();    &#125;    //定义一个方法，用于打印两个数字中的较大数，例如getMax()    public static void getMax() &#123;        //方法中定义两个变量，用于保存两个数字        int a = 10;        int b = 20;        //使用分支语句分两种情况对两个数字的大小关系进行处理        if(a &gt; b) &#123;            System.out.println(a);        &#125; else &#123;            System.out.println(b);        &#125;    &#125;&#125;\n\n3. 带参数方法定义和调用3.1 带参数方法定义和调用（掌握）\n定义格式：\n参数：由数据类型和变量名组成 -  数据类型 变量名\n参数范例：int a\npublic static void 方法名 (参数1) &#123;\t方法体;&#125;public static void 方法名 (参数1, 参数2, 参数3...) &#123;\t方法体;&#125;\n\n范例：\npublic static void isEvenNumber(int number)&#123;    ...&#125;public static void getMax(int num1, int num2)&#123;    ...&#125;\n\n\n注意：\n  方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错\n\n  方法定义时，多个参数之间使用逗号( ，)分隔\n\n\n\n\n调用格式：\n方法名(参数)；方法名(参数1,参数2);\n\n范例：\nisEvenNumber(10);getMax(10,20);\n\n\n方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错\n\n\n\n3.2 形参和实参（理解）\n形参：方法定义中的参数\n\n​          等同于变量定义格式，例如：int number\n\n实参：方法调用中的参数\n\n​          等同于使用变量或常量，例如： 10  number\n3.3 带参数方法练习（应用）\n需求：设计一个方法用于打印两个数中的较大数，数据来自于方法参数 }\n思路：\n①定义一个方法，用于打印两个数字中的较大数，例如getMax() \n②为方法定义两个参数，用于接收两个数字 \n③使用分支语句分两种情况对两个数字的大小关系进行处理 \n④在main()方法中调用定义好的方法（使用常量）\n⑤在main()方法中调用定义好的方法（使用变量）\n\n\n代码：\n\npublic class MethodTest &#123;    public static void main(String[] args) &#123;        //在main()方法中调用定义好的方法（使用常量）        getMax(10,20);        //调用方法的时候，人家要几个，你就给几个，人家要什么类型的，你就给什么类型的        //getMax(30);        //getMax(10.0,20.0);        //在main()方法中调用定义好的方法（使用变量）        int a = 10;        int b = 20;        getMax(a, b);    &#125;    //定义一个方法，用于打印两个数字中的较大数，例如getMax()    //为方法定义两个参数，用于接收两个数字    public static void getMax(int a, int b) &#123;        //使用分支语句分两种情况对两个数字的大小关系进行处理        if(a &gt; b) &#123;            System.out.println(a);        &#125; else &#123;            System.out.println(b);        &#125;    &#125;&#125;\n\n4. 带返回值方法的定义和调用4.1 带返回值方法定义和调用（掌握）\n定义格式\npublic static 数据类型 方法名 ( 参数 ) &#123; \treturn 数据 ;&#125;\n\n范例\npublic static boolean isEvenNumber( int number ) &#123;           \treturn true ;&#125;public static int getMax( int a, int b ) &#123;\treturn  100 ;&#125;\n\n\n注意：\n方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错\n\n\n\n\n调用格式\n方法名 ( 参数 ) ;数据类型 变量名 = 方法名 ( 参数 ) ;\n\n范例\nisEvenNumber ( 5 ) ;boolean  flag =  isEvenNumber ( 5 ); \n\n\n注意：\n方法的返回值通常会使用变量接收，否则该返回值将无意义\n\n\n\n\n\n4.2 带返回值方法练习（应用）\n需求：设计一个方法可以获取两个数的较大值，数据来自于参数\n\n思路：\n\n①定义一个方法，用于获取两个数字中的较大数 \n②使用分支语句分两种情况对两个数字的大小关系进行处理 \n③根据题设分别设置两种情况下对应的返回结果 \n④在main()方法中调用定义好的方法并使用变量保存 \n⑤在main()方法中调用定义好的方法并直接打印结果\n\n\n代码：\npublic class MethodTest &#123;    public static void main(String[] args) &#123;        //在main()方法中调用定义好的方法并使用变量保存        int result = getMax(10,20);        System.out.println(result);        //在main()方法中调用定义好的方法并直接打印结果        System.out.println(getMax(10,20));    &#125;    //定义一个方法，用于获取两个数字中的较大数    public static int getMax(int a, int b) &#123;        //使用分支语句分两种情况对两个数字的大小关系进行处理        //根据题设分别设置两种情况下对应的返回结果        if(a &gt; b) &#123;            return a;        &#125; else &#123;            return b;        &#125;    &#125;&#125;\n\n5. 方法的注意事项5.1 方法的注意事项（掌握）\n方法不能嵌套定义\n\n示例代码：\npublic class MethodDemo &#123;    public static void main(String[] args) &#123;    &#125;    public static void methodOne() &#123;\t\tpublic static void methodTwo() &#123;       \t\t// 这里会引发编译错误!!!    \t&#125;    &#125;&#125;\n\n\nvoid表示无返回值，可以省略return，也可以单独的书写return，后面不加数据\n\n示例代码：\npublic class MethodDemo &#123;    public static void main(String[] args) &#123;    &#125;    public static void methodTwo() &#123;        //return 100; 编译错误，因为没有具体返回值类型        return;\t        //System.out.println(100); return语句后面不能跟数据或代码    &#125;&#125;\n\n\n\n5.2 方法的通用格式（掌握）\n格式：\npublic static 返回值类型 方法名(参数) &#123;   方法体;    return 数据 ;&#125;\n\n解释：\n\npublic static     修饰符，目前先记住这个格式\n   返回值类型    方法操作完毕之后返回的数据的数据类型\n​            如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return\n   方法名        调用方法时候使用的标识\n   参数        由数据类型和变量名组成，多个参数之间用逗号隔开\n   方法体        完成功能的代码块\n   return        如果方法操作完毕，有数据返回，用于把数据返回给调用者\n\n\n\n定义方法时，要做到两个明确\n\n明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型\n明确参数：主要是明确参数的类型和数量\n\n\n调用方法时的注意：\n\nvoid类型的方法，直接调用即可\n非void类型的方法，推荐用变量接收调用\n\n\n\n6. 方法重载6.1 方法重载（理解）\n方法重载概念\n方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载\n\n多个方法在同一个类中\n多个方法具有相同的方法名\n多个方法的参数不相同，类型不同或者数量不同\n\n\n注意：\n\n重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式\n重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载\n\n\n正确范例：\npublic class MethodDemo &#123;\tpublic static void fn(int a) &#123;    \t//方法体    &#125;    public static int fn(double a) &#123;    \t//方法体    &#125;&#125;public class MethodDemo &#123;\tpublic static float fn(int a) &#123;    \t//方法体    &#125;    public static int fn(int a , int b) &#123;    \t//方法体    &#125;&#125;\n\n错误范例：\npublic class MethodDemo &#123;\tpublic static void fn(int a) &#123;    \t//方法体    &#125;    public static int fn(int a) &#123; \t/*错误原因：重载与返回值无关*/    \t//方法体    &#125;&#125;public class MethodDemo01 &#123;    public static void fn(int a) &#123;        //方法体    &#125;&#125; public class MethodDemo02 &#123;    public static int fn(double a) &#123; /*错误原因：这是两个类的两个fn方法*/        //方法体    &#125;&#125;\n\n6.2 方法重载练习（掌握）\n需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long） \n\n思路：\n\n①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数\n②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数\n③定义所有的重载方法，两个byte类型与两个short类型参数 \n④完成方法的调用，测试运行结果\n\n\n代码：\npublic class MethodTest &#123;    public static void main(String[] args) &#123;        //调用方法        System.out.println(compare(10, 20));        System.out.println(compare((byte) 10, (byte) 20));        System.out.println(compare((short) 10, (short) 20));        System.out.println(compare(10L, 20L));    &#125;    //int    public static boolean compare(int a, int b) &#123;        System.out.println(&quot;int&quot;);        return a == b;    &#125;    //byte    public static boolean compare(byte a, byte b) &#123;        System.out.println(&quot;byte&quot;);        return a == b;    &#125;    //short    public static boolean compare(short a, short b) &#123;        System.out.println(&quot;short&quot;);        return a == b;    &#125;    //long    public static boolean compare(long a, long b) &#123;        System.out.println(&quot;long&quot;);        return a == b;    &#125;&#125;\n\n7. 方法的参数传递7.1 方法参数传递基本类型（理解）\n测试代码：\npublic class ArgsDemo01 &#123;    public static void main(String[] args) &#123;        int number = 100;        System.out.println(&quot;调用change方法前：&quot; + number);        change(number);        System.out.println(&quot;调用change方法后：&quot; + number);    &#125;    public static void change(int number) &#123;        number = 200;    &#125;&#125;\n\n结论：\n\n基本数据类型的参数，形式参数的改变，不影响实际参数\n\n\n结论依据：\n\n每个方法在栈内存中，都会有独立的栈空间，方法运行结束后就会弹栈消失\n\n\n\n\n\n7.2 方法参数传递引用类型（理解）\n测试代码：\npublic class ArgsDemo02 &#123;    public static void main(String[] args) &#123;        int[] arr = &#123;10, 20, 30&#125;;        System.out.println(&quot;调用change方法前：&quot; + arr[1]);        change(arr);        System.out.println(&quot;调用change方法后：&quot; + arr[1]);    &#125;    public static void change(int[] arr) &#123;        arr[1] = 200;    &#125;&#125;\n\n结论：\n\n对于引用类型的参数，形式参数的改变，影响实际参数的值\n\n\n结论依据：\n\n引用数据类型的传参，传入的是地址值，内存中会造成两个引用指向同一个内存的效果，所以即使方法弹栈，堆内存中的数据也已经是改变后的结果 \n  \n\n\n\n\n7.3 数组遍历（应用）\n需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] \n\n思路：\n\n①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);\nSystem.out.println(“内容”); 输出内容并换行\nSystem.out.print(“内容”); 输出内容不换行\nSystem.out.println(); 起到换行的作用\n\n②定义一个数组，用静态初始化完成数组元素初始化\n\n③定义一个方法，用数组遍历通用格式对数组进行遍历\n\n④用新的输出语句修改遍历操作\n\n⑤调用遍历方法\n\n\n\n代码：\npublic class MethodTest01 &#123;    public static void main(String[] args) &#123;        //定义一个数组，用静态初始化完成数组元素初始化        int[] arr = &#123;11, 22, 33, 44, 55&#125;;        //调用方法        printArray(arr);    &#125;    //定义一个方法，用数组遍历通用格式对数组进行遍历    /*        两个明确：            返回值类型：void            参数：int[] arr     */    public static void printArray(int[] arr) &#123;        System.out.print(&quot;[&quot;);        for(int x=0; x&lt;arr.length; x++) &#123;            if(x == arr.length-1) &#123;                System.out.print(arr[x]);            &#125; else &#123;                System.out.print(arr[x]+&quot;, &quot;);            &#125;        &#125;        System.out.println(&quot;]&quot;);    &#125;&#125;\n\n7.4 数组最大值（应用）\n需求：设计一个方法用于获取数组中元素的最大值 \n\n思路：\n\n①定义一个数组，用静态初始化完成数组元素初始化\n②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了\n③调用获取最大值方法，用变量接收返回结果\n④把结果输出在控制台\n\n\n代码：\npublic class MethodTest02 &#123;    public static void main(String[] args) &#123;        //定义一个数组，用静态初始化完成数组元素初始化        int[] arr = &#123;12, 45, 98, 73, 60&#125;;        //调用获取最大值方法，用变量接收返回结果        int number = getMax(arr);        //把结果输出在控制台        System.out.println(&quot;number:&quot; + number);    &#125;    //定义一个方法，用来获取数组中的最大值    /*        两个明确：            返回值类型：int            参数：int[] arr     */    public static int getMax(int[] arr) &#123;        int max = arr[0];        for(int x=1; x&lt;arr.length; x++) &#123;            if(arr[x] &gt; max) &#123;                max = arr[x];            &#125;        &#125;        return max;    &#125;&#125;\n\n","categories":["Java"],"tags":["Java"]},{"title":"day07 类和对象","url":"/2022/04/11/day07/","content":"1. 类和对象1.1 类和对象的理解客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。\n\n类\n类的理解\n类是对现实生活中一类具有共同属性和行为的事物的抽象\n类是对象的数据类型，类是具有相同属性和行为的一组对象的集合\n简单理解：类就是对现实事物的一种描述\n\n\n类的组成\n属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）\n行为：指事物能执行的操作，例如：手机事物（打电话，发短信）\n\n\n\n\n类和对象的关系\n类：类是对现实生活中一类具有共同属性和行为的事物的抽象\n对象：是能够看得到摸的着的真实存在的实体\n简单理解：类是对事物的一种描述，对象则为具体存在的事物\n\n\n\n1.2 类的定义类的组成是由属性和行为两部分组成\n\n属性：在类中通过成员变量来体现（类中方法外的变量）\n行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）\n\n类的定义步骤：\n①定义类\n②编写类的成员变量\n③编写类的成员方法\npublic class 类名 &#123;\t// 成员变量\t变量1的数据类型 变量1；\t变量2的数据类型 变量2;\t…\t// 成员方法\t方法1;\t方法2;\t&#125;\n\n示例代码：\n/*    手机类：        类名：        手机(Phone)        成员变量：        品牌(brand)        价格(price)        成员方法：        打电话(call)        发短信(sendMessage) */public class Phone &#123;    //成员变量    String brand;    int price;    //成员方法    public void call() &#123;        System.out.println(&quot;打电话&quot;);    &#125;    public void sendMessage() &#123;        System.out.println(&quot;发短信&quot;);    &#125;&#125;\n\n1.3 对象的使用\n创建对象的格式：\n类名 对象名 &#x3D; new 类名();\n\n\n调用成员的格式：\n对象名.成员变量\n对象名.成员方法();\n\n\n示例代码\n\n/*    创建对象        格式：类名 对象名 = new 类名();        范例：Phone p = new Phone();    使用对象        1：使用成员变量            格式：对象名.变量名            范例：p.brand        2：使用成员方法            格式：对象名.方法名()            范例：p.call() */public class PhoneDemo &#123;    public static void main(String[] args) &#123;        //创建对象        Phone p = new Phone();        //使用成员变量        System.out.println(p.brand);        System.out.println(p.price);        p.brand = &quot;小米&quot;;        p.price = 2999;        System.out.println(p.brand);        System.out.println(p.price);        //使用成员方法        p.call();        p.sendMessage();    &#125;&#125;\n\n1.4 学生对象-练习\n需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用\n分析：\n成员变量：姓名，年龄…\n成员方法：学习，做作业…\n\n\n示例代码：\n\n![1](C:\\TeachRes\\Java2019\\JavaSe01\\day07\\4-笔记\\笔记图片资源包\\1.png)class Student &#123;    //成员变量    String name;    int age;    //成员方法    public void study() &#123;        System.out.println(&quot;好好学习，天天向上&quot;);    &#125;    public void doHomework() &#123;        System.out.println(&quot;键盘敲烂，月薪过万&quot;);    &#125;&#125;/*    学生测试类 */public class StudentDemo &#123;    public static void main(String[] args) &#123;        //创建对象        Student s = new Student();        //使用对象        System.out.println(s.name + &quot;,&quot; + s.age);        s.name = &quot;林青霞&quot;;        s.age = 30;        System.out.println(s.name + &quot;,&quot; + s.age);        s.study();        s.doHomework();    &#125;&#125;\n\n2. 对象内存图2.1 单个对象内存图\n成员变量使用过程\n\n\n\n成员方法调用过程\n\n\n2.2 多个对象内存图\n成员变量使用过程\n\n\n\n成员方法调用过程\n\n\n\n总结：\n多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份\n\n\n2.3 多个对象指向相同内存图\n\n总结\n当多个对象的引用指向同一个内存空间（变量所记录的地址值是一样的）\n只要有任何一个对象修改了内存中的数据，随后，无论使用哪一个对象进行数据获取，都是修改后的数据。\n\n\n3. 成员变量和局部变量3.1 成员变量和局部变量的区别\n类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）\n内存中位置不同：成员变量（堆内存）局部变量（栈内存）\n生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）\n初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）\n\n4. 封装4.1 private关键字private是一个修饰符，可以用来修饰成员（成员变量，成员方法）\n\n被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作\n\n提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰\n提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰\n\n\n示例代码：\n/*    学生类 */class Student &#123;    //成员变量    String name;    private int age;    //提供get/set方法    public void setAge(int a) &#123;        if(a&lt;0 || a&gt;120) &#123;            System.out.println(&quot;你给的年龄有误&quot;);        &#125; else &#123;            age = a;        &#125;    &#125;    public int getAge() &#123;        return age;    &#125;    //成员方法    public void show() &#123;        System.out.println(name + &quot;,&quot; + age);    &#125;&#125;/*    学生测试类 */public class StudentDemo &#123;    public static void main(String[] args) &#123;        //创建对象        Student s = new Student();        //给成员变量赋值        s.name = &quot;林青霞&quot;;        s.setAge(30);        //调用show方法        s.show();    &#125;&#125;\n\n4.2 private的使用\n需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出  林青霞，30 \n\n示例代码：\n/*    学生类 */class Student &#123;    //成员变量    private String name;    private int age;    //get/set方法    public void setName(String n) &#123;        name = n;    &#125;    public String getName() &#123;        return name;    &#125;    public void setAge(int a) &#123;        age = a;    &#125;    public int getAge() &#123;        return age;    &#125;    public void show() &#123;        System.out.println(name + &quot;,&quot; + age);    &#125;&#125;/*    学生测试类 */public class StudentDemo &#123;    public static void main(String[] args) &#123;        //创建对象        Student s = new Student();        //使用set方法给成员变量赋值        s.setName(&quot;林青霞&quot;);        s.setAge(30);        s.show();        //使用get方法获取成员变量的值        System.out.println(s.getName() + &quot;---&quot; + s.getAge());        System.out.println(s.getName() + &quot;,&quot; + s.getAge());    &#125;&#125;\n\n4.3 this关键字\nthis修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）\n方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量\n方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量\n\n\n\npublic class Student &#123;    private String name;    private int age;    public void setName(String name) &#123;        this.name = name;    &#125;    public String getName() &#123;        return name;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    public int getAge() &#123;        return age;    &#125;    public void show() &#123;        System.out.println(name + &quot;,&quot; + age);    &#125;&#125;\n\n4.4 this内存原理\nthis代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象\n\n示例代码：\npublic class StudentDemo &#123;    public static void main(String[] args) &#123;        Student s1 = new Student();        s1.setName(&quot;林青霞&quot;);        Student s2 = new Student();        s2.setName(&quot;张曼玉&quot;);    &#125;&#125;\n\n图解：\n\n\n\n\n4.5 封装思想\n封装概述 是面向对象三大特征之一（封装，继承，多态） 是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的\n封装原则 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 成员变量private，提供对应的getXxx()&#x2F;setXxx()方法\n封装好处 通过方法来控制成员变量的操作，提高了代码的安全性 把代码用方法进行封装，提高了代码的复用性\n\n5. 构造方法5.1 构造方法概述构造方法是一种特殊的方法\n\n作用：创建对象   Student stu &#x3D; new Student();\n\n格式：\npublic class 类名{\n​        修饰符 类名( 参数 ) {\n​        }\n}\n\n功能：主要是完成对象数据的初始化\n\n示例代码：\n\n\nclass Student &#123;    private String name;    private int age;    //构造方法    public Student() &#123;        System.out.println(&quot;无参构造方法&quot;);    &#125;    public void show() &#123;        System.out.println(name + &quot;,&quot; + age);    &#125;&#125;/*    测试类 */public class StudentDemo &#123;    public static void main(String[] args) &#123;        //创建对象        Student s = new Student();        s.show();    &#125;&#125;\n\n5.2 构造方法的注意事项\n构造方法的创建\n\n如果没有定义构造方法，系统将给出一个默认的无参数构造方法如果定义了构造方法，系统将不再提供默认的构造方法\n\n构造方法的重载\n\n如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法\n\n推荐的使用方式\n\n无论是否使用，都手工书写无参数构造方法\n\n重要功能！\n\n可以使用带参构造，为成员变量进行初始化\n\n示例代码\n\n/*    学生类 */class Student &#123;    private String name;    private int age;    public Student() &#123;&#125;    public Student(String name) &#123;        this.name = name;    &#125;    public Student(int age) &#123;        this.age = age;    &#125;    public Student(String name,int age) &#123;        this.name = name;        this.age = age;    &#125;    public void show() &#123;        System.out.println(name + &quot;,&quot; + age);    &#125;&#125;/*    测试类 */public class StudentDemo &#123;    public static void main(String[] args) &#123;        //创建对象        Student s1 = new Student();        s1.show();        //public Student(String name)        Student s2 = new Student(&quot;林青霞&quot;);        s2.show();        //public Student(int age)        Student s3 = new Student(30);        s3.show();        //public Student(String name,int age)        Student s4 = new Student(&quot;林青霞&quot;,30);        s4.show();    &#125;&#125;\n\n5.3 标准类制作\n需求：定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。 \n示例代码：\n\nclass Student &#123;    //成员变量    private String name;    private int age;    //构造方法    public Student() &#123;    &#125;    public Student(String name, int age) &#123;        this.name = name;        this.age = age;    &#125;    //成员方法    public void setName(String name) &#123;        this.name = name;    &#125;    public String getName() &#123;        return name;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    public int getAge() &#123;        return age;    &#125;    public void show() &#123;        System.out.println(name + &quot;,&quot; + age);    &#125;&#125;/*    创建对象并为其成员变量赋值的两种方式        1:无参构造方法创建对象后使用setXxx()赋值        2:使用带参构造方法直接创建带有属性值的对象*/public class StudentDemo &#123;    public static void main(String[] args) &#123;        //无参构造方法创建对象后使用setXxx()赋值        Student s1 = new Student();        s1.setName(&quot;林青霞&quot;);        s1.setAge(30);        s1.show();        //使用带参构造方法直接创建带有属性值的对象        Student s2 = new Student(&quot;林青霞&quot;,30);        s2.show();    &#125;&#125;\n\n","categories":["Java"],"tags":["Java"]},{"title":"day08 API","url":"/2022/04/11/day08/","content":"1.API1.1API概述\n什么是API\n​    API (Application Programming Interface) ：应用程序编程接口\n\njava中的API\n​    指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。\n\n\n1.2如何使用API帮助文档\n打开帮助文档\n\n\n\n找到索引选项卡中的输入框\n\n\n\n在输入框中输入Random\n\n\n\n看类在哪个包下\n\n\n\n看类的描述\n\n\n\n看构造方法\n\n\n\n看成员方法\n\n\n2.String类2.1String类概述​    String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！\n2.2String类的特点\n字符串不可变，它们的值在创建后不能被更改\n虽然 String 的值是不可变的，但是它们可以被共享\n字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )\n\n2.3String类的构造方法\n常用的构造方法\n\n\n\n方法名\n说明\n\n\n\npublic   String()\n创建一个空白字符串对象，不含有任何内容\n\n\npublic   String(char[] chs)\n根据字符数组的内容，来创建字符串对象\n\n\npublic   String(byte[] bys)\n根据字节数组的内容，来创建字符串对象\n\n\nString s &#x3D;   “abc”;\n直接赋值的方式创建字符串对象，内容就是abc\n\n\n\n示例代码\npublic class StringDemo01 &#123;    public static void main(String[] args) &#123;        //public String()：创建一个空白字符串对象，不含有任何内容        String s1 = new String();        System.out.println(&quot;s1:&quot; + s1);        //public String(char[] chs)：根据字符数组的内容，来创建字符串对象        char[] chs = &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;&#125;;        String s2 = new String(chs);        System.out.println(&quot;s2:&quot; + s2);        //public String(byte[] bys)：根据字节数组的内容，来创建字符串对象        byte[] bys = &#123;97, 98, 99&#125;;        String s3 = new String(bys);        System.out.println(&quot;s3:&quot; + s3);        //String s = “abc”;\t直接赋值的方式创建字符串对象，内容就是abc        String s4 = &quot;abc&quot;;        System.out.println(&quot;s4:&quot; + s4);    &#125;&#125;\n\n2.4创建字符串对象两种方式的区别\n通过构造方法创建\n​    通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同\n\n直接赋值方式创建\n​    以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护\n\n\n2.5字符串的比较2.5.1&#x3D;&#x3D;号的作用\n比较基本数据类型：比较的是具体的值\n比较引用数据类型：比较的是对象地址值\n\n2.5.2equals方法的作用\n方法介绍\npublic boolean equals(String s)     比较两个字符串内容是否相同、区分大小写\n\n示例代码\npublic class StringDemo02 &#123;    public static void main(String[] args) &#123;        //构造方法的方式得到对象        char[] chs = &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;&#125;;        String s1 = new String(chs);        String s2 = new String(chs);        //直接赋值的方式得到对象        String s3 = &quot;abc&quot;;        String s4 = &quot;abc&quot;;        //比较字符串对象地址是否相同        System.out.println(s1 == s2);        System.out.println(s1 == s3);        System.out.println(s3 == s4);        System.out.println(&quot;--------&quot;);        //比较字符串内容是否相同        System.out.println(s1.equals(s2));        System.out.println(s1.equals(s3));        System.out.println(s3.equals(s4));    &#125;&#125;\n\n2.6用户登录案例2.6.1案例需求​    已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示\n2.6.2代码实现/*    思路：        1:已知用户名和密码，定义两个字符串表示即可        2:键盘录入要登录的用户名和密码，用 Scanner 实现        3:拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用equals() 方法实现        4:用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环 */public class StringTest01 &#123;    public static void main(String[] args) &#123;        //已知用户名和密码，定义两个字符串表示即可        String username = &quot;itheima&quot;;        String password = &quot;czbk&quot;;        //用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环        for(int i=0; i&lt;3; i++) &#123;            //键盘录入要登录的用户名和密码，用 Scanner 实现            Scanner sc = new Scanner(System.in);            System.out.println(&quot;请输入用户名：&quot;);            String name = sc.nextLine();            System.out.println(&quot;请输入密码：&quot;);            String pwd = sc.nextLine();            //拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用equals() 方法实现            if (name.equals(username) &amp;&amp; pwd.equals(password)) &#123;                System.out.println(&quot;登录成功&quot;);                break;            &#125; else &#123;                if(2-i == 0) &#123;                    System.out.println(&quot;你的账户被锁定，请与管理员联系&quot;);                &#125; else &#123;                    //2,1,0                    //i,0,1,2                    System.out.println(&quot;登录失败，你还有&quot; + (2 - i) + &quot;次机会&quot;);                &#125;            &#125;        &#125;    &#125;&#125;\n\n2.7遍历字符串案例2.7.1案例需求​    键盘录入一个字符串，使用程序实现在控制台遍历该字符串\n2.7.2代码实现/*    思路：        1:键盘录入一个字符串，用 Scanner 实现        2:遍历字符串，首先要能够获取到字符串中的每一个字符            public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的        3:遍历字符串，其次要能够获取到字符串的长度            public int length()：返回此字符串的长度            数组的长度：数组名.length            字符串的长度：字符串对象.length()        4:遍历字符串的通用格式 */public class StringTest02 &#123;    public static void main(String[] args) &#123;        //键盘录入一个字符串，用 Scanner 实现        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入一个字符串：&quot;);        String line = sc.nextLine();        for(int i=0; i&lt;line.length(); i++) &#123;            System.out.println(line.charAt(i));        &#125;    &#125;&#125;\n\n2.8统计字符次数案例2.8.1案例需求​    键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)\n2.8.2代码实现/*  思路：        1:键盘录入一个字符串，用 Scanner 实现        2:要统计三种类型的字符个数，需定义三个统计变量，初始值都为0        3:遍历字符串，得到每一个字符        4:判断该字符属于哪种类型，然后对应类型的统计变量+1            假如ch是一个字符，我要判断它属于大写字母，小写字母，还是数字，直接判断该字符是否在对应的范围即可            大写字母：ch&gt;=&#x27;A&#x27; &amp;&amp; ch&lt;=&#x27;Z&#x27;            小写字母： ch&gt;=&#x27;a&#x27; &amp;&amp; ch&lt;=&#x27;z&#x27;            数字： ch&gt;=&#x27;0&#x27; &amp;&amp; ch&lt;=&#x27;9&#x27;        5:输出三种类型的字符个数 */public class StringTest03 &#123;    public static void main(String[] args) &#123;        //键盘录入一个字符串，用 Scanner 实现        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入一个字符串：&quot;);        String line = sc.nextLine();        //要统计三种类型的字符个数，需定义三个统计变量，初始值都为0        int bigCount = 0;        int smallCount = 0;        int numberCount = 0;        //遍历字符串，得到每一个字符        for(int i=0; i&lt;line.length(); i++) &#123;            char ch = line.charAt(i);            //判断该字符属于哪种类型，然后对应类型的统计变量+1            if(ch&gt;=&#x27;A&#x27; &amp;&amp; ch&lt;=&#x27;Z&#x27;) &#123;                bigCount++;            &#125; else if(ch&gt;=&#x27;a&#x27; &amp;&amp; ch&lt;=&#x27;z&#x27;) &#123;                smallCount++;            &#125; else if(ch&gt;=&#x27;0&#x27; &amp;&amp; ch&lt;=&#x27;9&#x27;) &#123;                numberCount++;            &#125;        &#125;        //输出三种类型的字符个数        System.out.println(&quot;大写字母：&quot; + bigCount + &quot;个&quot;);        System.out.println(&quot;小写字母：&quot; + smallCount + &quot;个&quot;);        System.out.println(&quot;数字：&quot; + numberCount + &quot;个&quot;);    &#125;&#125;\n\n2.9字符串拼接案例2.9.1案例需求​    定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，\n​    并在控制台输出结果。例如，数组为 int[] arr &#x3D; {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]\n2.9.2代码实现/*    思路：        1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化        2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。          返回值类型 String，参数列表 int[] arr        3:在方法中遍历数组，按照要求进行拼接        4:调用方法，用一个变量接收结果        5:输出结果 */public class StringTest04 &#123;    public static void main(String[] args) &#123;        //定义一个 int 类型的数组，用静态初始化完成数组元素的初始化        int[] arr = &#123;1, 2, 3&#125;;        //调用方法，用一个变量接收结果        String s = arrayToString(arr);        //输出结果        System.out.println(&quot;s:&quot; + s);    &#125;    //定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回    /*        两个明确：            返回值类型：String            参数：int[] arr     */    public static String arrayToString(int[] arr) &#123;        //在方法中遍历数组，按照要求进行拼接        String s = &quot;&quot;;        s += &quot;[&quot;;        for(int i=0; i&lt;arr.length; i++) &#123;            if(i==arr.length-1) &#123;                s += arr[i];            &#125; else &#123;                s += arr[i];                s += &quot;, &quot;;            &#125;        &#125;        s += &quot;]&quot;;        return s;    &#125;&#125;\n\n2.10字符串反转案例2.10.1案例需求​    定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果\n​    例如，键盘录入 abc，输出结果 cba\n2.10.2代码实现/*    思路：        1:键盘录入一个字符串，用 Scanner 实现        2:定义一个方法，实现字符串反转。返回值类型 String，参数 String s        3:在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回        4:调用方法，用一个变量接收结果        5:输出结果 */public class StringTest05 &#123;    public static void main(String[] args) &#123;        //键盘录入一个字符串，用 Scanner 实现        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入一个字符串：&quot;);        String line = sc.nextLine();        //调用方法，用一个变量接收结果        String s = reverse(line);        //输出结果        System.out.println(&quot;s:&quot; + s);    &#125;    //定义一个方法，实现字符串反转    /*        两个明确：            返回值类型：String            参数：String s     */    public static String reverse(String s) &#123;        //在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回        String ss = &quot;&quot;;        for(int i=s.length()-1; i&gt;=0; i--) &#123;            ss += s.charAt(i);        &#125;        return ss;    &#125;&#125;\n\n2.11帮助文档查看String常用方法\n\n\n方法名\n说明\n\n\n\npublic boolean   equals(Object anObject)\n比较字符串的内容，严格区分大小写(用户名和密码)\n\n\npublic char charAt(int   index)\n返回指定索引处的 char 值\n\n\npublic int   length()\n返回此字符串的长度\n\n\n3.ArrayList3.1ArrayList类概述\n什么是集合\n​    提供一种存储空间可变的存储模型，存储的数据容量可以发生改变\n\nArrayList集合的特点\n​    底层是数组实现的，长度可以变化\n\n泛型的使用\n​    用于约束集合中存储元素的数据类型\n\n\n3.2ArrayList类常用方法3.2.1构造方法\n\n\n方法名\n说明\n\n\n\npublic ArrayList()\n创建一个空的集合对象\n\n\n3.2.2成员方法\n\n\n方法名\n说明\n\n\n\npublic boolean   remove(Object o)\n删除指定的元素，返回删除是否成功\n\n\npublic E   remove(int   index)\n删除指定索引处的元素，返回被删除的元素\n\n\npublic E   set(int index,E   element)\n修改指定索引处的元素，返回被修改的元素\n\n\npublic E   get(int   index)\n返回指定索引处的元素\n\n\npublic int   size()\n返回集合中的元素的个数\n\n\npublic boolean   add(E e)\n将指定的元素追加到此集合的末尾\n\n\npublic void   add(int index,E   element)\n在此集合中的指定位置插入指定的元素\n\n\n3.2.3示例代码public class ArrayListDemo02 &#123;    public static void main(String[] args) &#123;        //创建集合        ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;();        //添加元素        array.add(&quot;hello&quot;);        array.add(&quot;world&quot;);        array.add(&quot;java&quot;);        //public boolean remove(Object o)：删除指定的元素，返回删除是否成功//        System.out.println(array.remove(&quot;world&quot;));//        System.out.println(array.remove(&quot;javaee&quot;));        //public E remove(int index)：删除指定索引处的元素，返回被删除的元素//        System.out.println(array.remove(1));        //IndexOutOfBoundsException//        System.out.println(array.remove(3));        //public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素//        System.out.println(array.set(1,&quot;javaee&quot;));        //IndexOutOfBoundsException//        System.out.println(array.set(3,&quot;javaee&quot;));        //public E get(int index)：返回指定索引处的元素//        System.out.println(array.get(0));//        System.out.println(array.get(1));//        System.out.println(array.get(2));        //System.out.println(array.get(3)); //？？？？？？ 自己测试        //public int size()：返回集合中的元素的个数        System.out.println(array.size());        //输出集合        System.out.println(&quot;array:&quot; + array);    &#125;&#125;\n\n3.3ArrayList存储字符串并遍历3.3.1案例需求​    创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合\n3.3.2代码实现/*    思路：        1:创建集合对象        2:往集合中添加字符串对象        3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现        4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现        5:遍历集合的通用格式 */public class ArrayListTest01 &#123;    public static void main(String[] args) &#123;        //创建集合对象        ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;();        //往集合中添加字符串对象        array.add(&quot;刘正风&quot;);        array.add(&quot;左冷禅&quot;);        array.add(&quot;风清扬&quot;);        //遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现//        System.out.println(array.size());        //遍历集合的通用格式        for(int i=0; i&lt;array.size(); i++) &#123;            String s = array.get(i);            System.out.println(s);        &#125;    &#125;&#125;\n\n3.4ArrayList存储学生对象并遍历3.4.1案例需求​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合\n3.4.2代码实现/*    思路：        1:定义学生类        2:创建集合对象        3:创建学生对象        4:添加学生对象到集合中        5:遍历集合，采用通用遍历格式实现 */public class ArrayListTest02 &#123;    public static void main(String[] args) &#123;        //创建集合对象        ArrayList&lt;Student&gt; array = new ArrayList&lt;&gt;();        //创建学生对象        Student s1 = new Student(&quot;林青霞&quot;, 30);        Student s2 = new Student(&quot;风清扬&quot;, 33);        Student s3 = new Student(&quot;张曼玉&quot;, 18);        //添加学生对象到集合中        array.add(s1);        array.add(s2);        array.add(s3);        //遍历集合，采用通用遍历格式实现        for (int i = 0; i &lt; array.size(); i++) &#123;            Student s = array.get(i);            System.out.println(s.getName() + &quot;,&quot; + s.getAge());        &#125;    &#125;&#125;\n\n3.5ArrayList存储学生对象并遍历升级版3.5.1案例需求​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合\n​        学生的姓名和年龄来自于键盘录入\n3.5.2代码实现/*    思路：        1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型        2:创建集合对象        3:键盘录入学生对象所需要的数据        4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量        5:往集合中添加学生对象        6:遍历集合，采用通用遍历格式实现 */public class ArrayListTest &#123;    public static void main(String[] args) &#123;        //创建集合对象        ArrayList&lt;Student&gt; array = new ArrayList&lt;Student&gt;();        //为了提高代码的复用性，我们用方法来改进程序        addStudent(array);        addStudent(array);        addStudent(array);        //遍历集合，采用通用遍历格式实现        for (int i = 0; i &lt; array.size(); i++) &#123;            Student s = array.get(i);            System.out.println(s.getName() + &quot;,&quot; + s.getAge());        &#125;    &#125;    /*        两个明确：            返回值类型：void            参数：ArrayList&lt;Student&gt; array     */    public static void addStudent(ArrayList&lt;Student&gt; array) &#123;        //键盘录入学生对象所需要的数据        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入学生姓名:&quot;);        String name = sc.nextLine();        System.out.println(&quot;请输入学生年龄:&quot;);        String age = sc.nextLine();        //创建学生对象，把键盘录入的数据赋值给学生对象的成员变量        Student s = new Student();        s.setName(name);        s.setAge(age);        //往集合中添加学生对象        array.add(s);    &#125;&#125;\n\n","categories":["Java"],"tags":["Java"]},{"title":"Hello World","url":"/2022/04/10/lambda/","content":"Lambda概述\nLambda表达式是JDK 8开始后的一种新语法形式\n作用：简化匿名内部类的代码写法。\n\nLambda表达式的简化格式（匿名内部类被重写方法的形参列表）-&gt; &#123;    被重写方法的方法体代码。&#125;注： -&gt; 是语法形式，无实际含义\n"},{"title":"day09 ATM系统开发","url":"/2022/04/11/day09-ATM/","content":"ATM系统开发前说明项目演示环节\n建议读者先把项目代码执行起来，玩一下每个功能，再观看本文档，这样思路会非常清晰\n\n项目技术选型\n项目收获\nATM系统功能实战系统准备、首页设计系统准备内容分析：\n①每个用户的账户信息都是一个对象，需要提供账户类。\n②需要准备一个容器，用于存储系统全部账户对象信息。\n③首页只需要包含：登录和注册2个功能。\n\n实现步骤：\n①定义账户类，用于后期创建账户对象封装用户的账户信息。\n②账户类中的信息至少需要包含（卡号、姓名、密码、余额、取现额度）\n③需要准备一个ArrayList的集合，用于存储系统用户的账户对象。\n④定义一个系统启动类ATMSystem需要展示欢迎页包含2个功能：开户功能、登录账户。\npublic class Account &#123;    private String cardId;  // 卡号    private String userName;  // 客户名称    private String passWord;  // 密码    private double money;  // 余额    private double quotaMoney;  // 当次取现限额    public Account() &#123;    &#125;    public Account(String cardId, String userName, String passWord, double quotaMoney) &#123;        this.cardId = cardId;        this.userName = userName;        this.passWord = passWord;        this.quotaMoney = quotaMoney;    &#125;    public String getCardId() &#123;        return cardId;    &#125;    public void setCardId(String cardId) &#123;        this.cardId = cardId;    &#125;    public String getUserName() &#123;        return userName;    &#125;    public void setUserName(String userName) &#123;        this.userName = userName;    &#125;    public String getPassWord() &#123;        return passWord;    &#125;    public void setPassWord(String passWord) &#123;        this.passWord = passWord;    &#125;    public double getMoney() &#123;        return money;    &#125;    public void setMoney(double money) &#123;        this.money = money;    &#125;    public double getQuotaMoney() &#123;        return quotaMoney;    &#125;    public void setQuotaMoney(double quotaMoney) &#123;        this.quotaMoney = quotaMoney;    &#125;&#125;\n\npublic class ATMSystem &#123;    public static void main(String[] args) &#123;        // 1、准备系统需要的容器对象，用于存储账户对象        ArrayList&lt;Account&gt; accounts = new ArrayList&lt;&gt;();        // 2、准备系统的首页：登录 开户        showMain(accounts);    &#125;    public static void showMain(ArrayList&lt;Account&gt; accounts) &#123;        System.out.println(&quot;=============欢迎进入首页=================&quot;);        Scanner sc = new Scanner(System.in);        while (true) &#123;            System.out.println(&quot;请您输入您想做的操作：&quot;);            System.out.println(&quot;1、登录&quot;);            System.out.println(&quot;2、开户&quot;);            System.out.print(&quot;您可以输入命令了：&quot;);            int command = sc.nextInt();            switch (command) &#123;                case 1:                    // 登录                    login(accounts, sc);                    break;                case 2:                    // 开户                    register(accounts, sc);                    break;                default:                    System.out.println(&quot;您当前输入的操作命令不被支持！&quot;);            &#125;        &#125;    &#125;&#125;\n\n\n\n\n\n用户开户功能实现l开户功能其实就是就是往系统的集合容器中存入一个新的账户对象的信息。\n\n开户功能实现步骤\n①定义方法完成开户：\n②键盘录入姓名、密码、确认密码（需保证两次密码一致）\n③生成账户卡号，卡号必须由系统自动生成8位数字（必须保证卡号的唯一）\n④创建Account账户类对象用于封装账户信息（姓名、密码、卡号）\n⑤把Account账户类对象存入到集合accounts中去。\n/** * 用户开户功能 * @param accounts 账户的集合对象 */private static void register(ArrayList&lt;Account&gt; accounts, Scanner sc) &#123;    System.out.println(&quot;===============用户开户功能==============&quot;);    // 2、键盘录入 姓名 密码 确认密码    System.out.println(&quot;请您输入开户名称：&quot;);    String name = sc.next();    String password = &quot;&quot;;    while (true) &#123;        System.out.println(&quot;请您输入开户密码：&quot;);        password = sc.next();        System.out.println(&quot;请您输入确认密码：&quot;);        String okPassword = sc.next();        // 判断两次输入的密码是否一致        if(okPassword.equals(password))&#123;            break;        &#125;else &#123;            System.out.println(&quot;两次密码必须一致~~~&quot;);        &#125;    &#125;    System.out.println(&quot;请您输入当次限额：&quot;);    double quotaMoney = sc.nextDouble();    // 3、生成账户的卡号，卡号是8位，而且不能与其他账户卡号重复。    String cardId = createCardId(accounts);    // 4、创建一个账户对象封装账户的信息    //   public Account(String cardId, String userName, String passWord, double money, double quotaMoney)    Account account = new Account(cardId, name, password,quotaMoney);    // 5、把账户对象添加到集合中去    accounts.add(account);    System.out.println(&quot;恭喜您，您开户成功，您的卡号是：&quot; + account.getCardId() +&quot;。请您妥善保管&quot;);&#125;public static String createCardId(ArrayList&lt;Account&gt; accounts)&#123;    while (true) &#123;        // 生成8位随机的数字代表卡号        String cardId = &quot;&quot;;        Random r = new Random();        for (int i = 0; i &lt; 8; i++) &#123;            cardId += r.nextInt(10);        &#125;        // 判断卡号是否重复了        Account acc = getAccountByCardId(cardId, accounts);        if(acc == null)&#123;            // 说明当前卡号没有重复            return cardId;        &#125;    &#125;&#125;public static Account getAccountByCardId(String cardId , ArrayList&lt;Account&gt; accounts)&#123;    // 根据卡号查询账户对象    for (int i = 0; i &lt; accounts.size(); i++) &#123;        Account acc = accounts.get(i);        if(acc.getCardId().equals(cardId))&#123;            return acc;        &#125;    &#125;    return null; // 查无此账户，说明卡号没有重复了！&#125;\n\n用户登录功能实现\n分析\n①定义方法：\n②让用户键盘录入卡号，根据卡号查询账户对象。\n③如果没有找到了账户对象，说明卡号不存在，提示继续输入卡号。\n④如果找到了账户对象，说明卡号存在，继续输入密码。\n⑤如果密码不正确，提示继续输入密码\n⑥如果密码正确，提示登陆成功！！\n/** * 完成用户登录 * @param accounts */private static void login(ArrayList&lt;Account&gt; accounts, Scanner sc) &#123;    // 必须系统中存在账户才可以登录    if(accounts.size() == 0)&#123;        // 没有任何账户        System.out.println(&quot;当前系统中无任何账户，您需要先注册！&quot;);        return; // 直接结束方法的执行！    &#125;    // 2、让用户键盘录入卡号，    while (true) &#123;        System.out.println(&quot;请您输入登录的卡号：&quot;);        String cardId = sc.next();        // 根据卡号查询账户对象。        Account acc = getAccountByCardId(cardId , accounts);        // 3、判断账户对象是否存在，存在说明卡号没问题        if(acc != null)&#123;            while (true) &#123;                // 4、让用户继续输入密码                System.out.println(&quot;请您输入登录的密码：&quot;);                String password = sc.next();                // 5、判断密码是否正确                if(acc.getPassWord().equals(password))&#123;                    // 密码正确，登录成功                    // 展示系统登录后的操作界面（下节课继续完成的功能！！）                    System.out.println(&quot;恭喜您，&quot; + acc.getUserName() +&quot;先生/女士成功进入系统，您的卡号是：&quot; + acc.getCardId());                    // 展示操作页面                    showUserCommand(sc, acc , accounts);                    return; // 继续结束登录方法                &#125;else &#123;                    System.out.println(&quot;您的密码有误，请确认！&quot;);                &#125;            &#125;        &#125;else &#123;            System.out.println(&quot;对不起，不存在该卡号的账户！&quot;);        &#125;    &#125;&#125;\n\n用户操作页设计、查询账户、退出账户功能实现\n①用户登录成功后，需要进入用户操作页，退出账户是需要回到首页的。\nprivate static void showUserCommand(Scanner sc, Account acc , ArrayList&lt;Account&gt; accounts) &#123;    while (true) &#123;        System.out.println(&quot;==================用户操作界面===================&quot;);        System.out.println(&quot;1、查询账户&quot;);        System.out.println(&quot;2、存款&quot;);        System.out.println(&quot;3、取款&quot;);        System.out.println(&quot;4、转账&quot;);        System.out.println(&quot;5、修改密码&quot;);        System.out.println(&quot;6、退出&quot;);        System.out.println(&quot;7、注销账户&quot;);        System.out.println(&quot;请您输入操作命令：&quot;);        int command = sc.nextInt();        switch (command) &#123;                case 1:                    // 查询账户                    showAccount(acc);                    break;                case 2:                    // 存款                    depositMoney(acc, sc);                    break;                case 3:                    // 取款                    drawMoney(acc,sc);                    break;                case 4:                    // 转账                    transferMoney(accounts, acc , sc);                    break;                case 5:                    // 修改密码                    updatePassWord(acc,sc);                    return; // 结束当前操作的方法                case 6:                    // 退出                    System.out.println(&quot;欢迎下次光临！！&quot;);                    return; // 结束当前操作的方法！                case 7:                    // 注销账户                    // 从当前集合中抹掉当前账户对象即可                    accounts.remove(acc);                    System.out.println(&quot;销户成功了！！&quot;);                    return;// 结束当前操作的方法！                default:                    System.out.println(&quot;您的命令输入有误~~~&quot;);            &#125;    &#125;&#125;\n\n②查询就是直接展示当前登录成功的账户对象的信息。\n\nprivate static void showAccount(Account acc) &#123;    System.out.println(&quot;==================当前账户详情===================&quot;);    System.out.println(&quot;卡号：&quot; + acc.getCardId());    System.out.println(&quot;姓名：&quot; + acc.getUserName());    System.out.println(&quot;余额：&quot; + acc.getMoney());    System.out.println(&quot;当次限额：&quot; + acc.getQuotaMoney());&#125;\n\n用户存款功能实现\n①存款就是拿到当前账户对象。\n②然后让用户输入存款的金额。\n③调用账户对象的setMoney方法将账户余额修改成存钱后的余额。\n④存钱后需要查询一下账户信息，确认是否存钱成功了！\n/**   存钱的 * @param acc */private static void depositMoney(Account acc, Scanner sc) &#123;    System.out.println(&quot;==================存钱操作===================&quot;);    System.out.println(&quot;请您输入存款的金额：&quot;);    double money = sc.nextDouble();    // 直接把金额修改到账户对象的money属性中去    acc.setMoney(acc.getMoney() + money);    System.out.println(&quot;存款完成！！&quot;);    showAccount(acc);&#125;\n\n用户取款功能实现\n取款分析\n①取款需要先判断账户是否有钱。\n②有钱则拿到自己账户对象。\n③然后让用户输入取款金额\n④判断取款金额是否超过了当次限额，以及余额是否足够\n⑤满足要求则调用账户对象的setMoney方法完成金额的修改。\n/**   取款 * @param acc * @param sc */private static void drawMoney(Account acc, Scanner sc) &#123;    System.out.println(&quot;==================取款操作===================&quot;);    // 1、判断它的账户是否足够100元    if(acc.getMoney() &gt;= 100)&#123;        while (true) &#123;            System.out.println(&quot;请您输入取款的金额：&quot;);            double money = sc.nextDouble();            // 2、判断这个金额有没有超过当次限额            if(money &gt; acc.getQuotaMoney())&#123;                System.out.println(&quot;您当次取款金额超过每次限额，不要取那么多，每次最多可以取：&quot; + acc.getQuotaMoney());            &#125;else &#123;                // 3、判断当前余额是否足够你取钱                if(acc.getMoney() &gt;= money)&#123;                    // 够钱，可以取钱了                    acc.setMoney(acc.getMoney() - money);                    System.out.println(&quot;恭喜您，取钱&quot; + money + &quot;成功了！当前账户还剩余：&quot; + acc.getMoney());                    return;// 取钱后干掉取钱方法                &#125;else &#123;                    System.out.println(&quot;余额不足啊！&quot;);                &#125;            &#125;        &#125;    &#125;else &#123;        System.out.println(&quot;您自己的金额没有超过100元，就别取了~~~&quot;);    &#125;&#125;\n\n用户转账功能实现分析\n①转账功能需要判断系统中是否有2个账户对象及以上。\n②同时还要判断自己账户是否有钱。\n③接下来需要输入对方卡号，判断对方账户是否存在。\n④对方账户存在还需要认证对方户主的姓氏。\n⑤满足要求则可以把自己账户对象的金额修改到对方账户对象中去。\n/**  转账功能 * @param accounts * @param acc * @param sc */private static void transferMoney(ArrayList&lt;Account&gt; accounts, Account acc, Scanner sc) &#123;    // 1、判断系统中是否有2个账户及以上    if(accounts.size() &lt; 2)&#123;        System.out.println(&quot;对不起，系统中无其他账户，您不可以转账！&quot;);        return;    &#125;    // 2、判断自己的账户对象中是否有钱    if(acc.getMoney() == 0)&#123;        System.out.println(&quot;对不起，您自己都没钱，就别转了~~&quot;);        return;    &#125;    // 3、开始转账逻辑    while (true) &#123;        System.out.println(&quot;请您输入对方账户的卡号：&quot;);        String cardId = sc.next();        Account account = getAccountByCardId(cardId , accounts);        // 判断这个账户对象是否存在，存在说明对方卡号输入正确        if(account != null)&#123;            // 判断这个账户对象是否是当前登录的账户自己            if(account.getCardId().equals(acc.getCardId()))&#123;                // 正在给自己转账                System.out.println(&quot;您不可以为自己转账！&quot;);            &#125;else &#123;                // 确认对方的姓氏                String name = &quot;*&quot; + account.getUserName().substring(1);                System.out.print(&quot;请您确认【&quot; + name + &quot;】的姓氏：&quot;);                String preName = sc.next(); // 王                // 判断        黑马关之琳                if(account.getUserName().startsWith(preName))&#123;                    // 真正开始转账了                    System.out.println(&quot;请您输入转账的金额：&quot;);                    double money = sc.nextDouble();                    // 判断这个金额是否超过了自己的余额                    if(money &gt; acc.getMoney() )&#123;                        System.out.println(&quot;对不起，您要转账的金额太多，您最多可以转账多少：&quot; + acc.getMoney());                    &#125;else &#123;                        // 真的可以转了                        acc.setMoney(acc.getMoney() - money);                        account.setMoney(account.getMoney() + money);                        System.out.println(&quot;恭喜您，转账成功了，已经为&quot; + account.getUserName() +&quot;转账多少：&quot; + money);                        showAccount(acc);                        return;                    &#125;                &#125;else &#123;                    System.out.println(&quot;对不起，您认证的信息有误~~~&quot;);                &#125;            &#125;        &#125;else &#123;            System.out.println(&quot;对不起，您输入的转账卡号有问题！&quot;);        &#125;    &#125;&#125;\n\n用户密码修改、销户功能实现\n分析\n①修改密码就是把当前对象的密码属性使用set方法进行更新。\nprivate static void updatePassWord(Account acc, Scanner sc) &#123;    System.out.println(&quot;===========修改密码=======================&quot;);    while (true) &#123;        System.out.println(&quot;请您输入正确的密码：&quot;);        String okPassWord = sc.next();        // 判断密码是否正确        if(acc.getPassWord().equals(okPassWord))&#123;            while (true) &#123;                // 可以输入新密码                System.out.println(&quot;请您输入新的密码：&quot;);                String newPassWord = sc.next();                System.out.println(&quot;请您输入确认密码：&quot;);                String okNewPassWord = sc.next();                if(newPassWord.equals(okNewPassWord)) &#123;                    // 修改账户对象的密码为新密码                    acc.setPassWord(newPassWord);                    return; // 直接结束掉！！                &#125;else &#123;                    System.out.println(&quot;您两次输入的密码不一致~~&quot;);                &#125;            &#125;        &#125;else &#123;            System.out.println(&quot;当前输入的密码不正确~~~&quot;);        &#125;    &#125;&#125;\n\n②销户是从集合对象中删除当前对象，并回到首页。\ncase 7:    // 注销账户    // 从当前集合中抹掉当前账户对象即可    accounts.remove(acc);    System.out.println(&quot;销户成功了！！&quot;);    return;// 结束当前操作的方法！\n\n","categories":["Java"],"tags":["Java"]},{"title":"阅读理解因果联系","url":"/2022/05/17/englishread/","content":"\n        \n            \n        \n        \n          var ap = new APlayer({\n            element: document.getElementById(\"aplayer-jvsNJEbY\"),\n            narrow: false,\n            autoplay: false,\n            showlrc: false,\n            music: {\n              title: \"半壶纱\",\n              author: \"刘珂矣\",\n              url: \"https://img.yaojian.cc/music%2F%E5%8D%8A%E5%A3%B6%E7%BA%B1.mp3\",\n              pic: \"https://img.yaojian.cc/music%2F12411252151.jpg\",\n              lrc: \"\"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        \n\n明显因果逻辑信号因为…(原因)e.g. because (of) &#x2F; the reason is &#x2F; due to &#x2F; in that &#x2F;result from &#x2F; since &#x2F; as &#x2F; for &#x2F; owing to &#x2F;thanks to\n所以…(结果)e.g. so &#x2F; result in &#x2F; thereforce &#x2F; consequently &#x2F; as a result &#x2F; lead to \n隐藏因果逻辑信号from 词组e.g. stem &#x2F; initiate &#x2F; originate &#x2F; derive from …\n“使发生”动词e.g.fuel 推动 &#x2F; drive 驱使 &#x2F; inspire 产生 &#x2F; allow 允许…发生 &#x2F; explain 解释…原因 &#x2F; give rise to 导致 &#x2F; motivate 驱使 &#x2F; prompt 促使 &#x2F; stimulate 促成 &#x2F; be responsible for 造成\n条件因果信号e.g. if 如果… &#x2F; when 当… &#x2F; as long as 只要…(就) &#x2F; once 一…就…例句：I couldn’t hear the news on TV, with all the other noise going on.\n时间因果信号e.g. before &#x2F; prior to… 在…之前after(wards) &#x2F; then 在…之后例句：after what she did to me, I’ll never trust her again.\n","categories":["English"]}]